@using JobAgent.Models
@using JobAgent.Services
@using Blazored.LocalStorage

@inject AuthenticationService authService
@inject SecurityService securityService
@inject NavigationManager navigationManager
@inject ILocalStorageService storageService
@inject AuthenticationStateProvider authenticationStateProvicer

<BSButton Color="Color.Info" @onclick="@(() => LoginModal.Show())" href="#login">Praktikekonsulenter</BSButton>

<BSModal @ref="LoginModal" IsCentered="true" IgnoreEscape="true" IgnoreClickOnBackdrop="true">
    <BSModalHeader OnClick="@(() => LoginModal.Hide())">Praktikkonsulent Log Ind</BSModalHeader>
    <BSModalBody>
        @* Login Form *@
        <EditForm Model="model" OnValidSubmit="LogInUserAsync">

            @if (message != "" && message != null)
            {
                <BSAlert Color="Color.Dark">@message</BSAlert>
            }

            <DataAnnotationsValidator />
            <ValidationSummary />

            <BSFormGroup>
                <BSLabel For="inputEmail1">Email Adresse</BSLabel>
                <BSInput Id="inputEmail1" InputType="InputType.Email" PlaceHolder="Indtast email adresse.." @bind-Value="model.Email" />
            </BSFormGroup>
            <BSFormGroup>
                <BSLabel For="inputPassword">Adgangskode</BSLabel>
                <BSInput Id="inputPassword" InputType="InputType.Password" Placeholder="Indtast adgangskode.." @bind-Value="model.Password" />
            </BSFormGroup>
            <BSButton Color="Color.Info" ButtonType="ButtonType.Submit" Class="btn-block mr-2" IsDisabled="@isProcessing">Log ind</BSButton>

        </EditForm>
    </BSModalBody>
    <BSModalFooter>
        <BSButton Color="Color.Danger" @onclick="@(() => LoginModal.Hide())">Tilbage</BSButton>
    </BSModalFooter>
</BSModal>

@code {
    BSModal LoginModal { get; set; }

    LogInModel model = new LogInModel();

    bool isProcessing = false;
    string message = string.Empty;

    public async Task LogInUserAsync()
    {
        isProcessing = true;
        message = "Processing request...";
        var result = await authService.LogInUserAsync(model);

        if (result.IsSuccess)
        {
            var userInfo = new JobAgent.Data.User()
            {
            };

            message = result.Message;

            await storageService.SetItemAsync("User", userInfo);
            var authState = await authenticationStateProvicer.GetAuthenticationStateAsync();
            var user = authState.User;

            navigationManager.NavigateTo("/", true);
        }
        else
        {
            message = result.Message;

        }
        isProcessing = false;
    }
}
