@page "/login"

@using System.Security.Claims
@using Blazored.LocalStorage
@using JobAgent.Models
@using JobAgent.Data
@using JobAgent.Data.Interfaces

@*@inject AuthenticationStateProvider authenticationStateProvider*@
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navigationManager
@inject ILocalStorageService localStorageService
@inject IUserService userService
@* Login Form *@
<EditForm Model="user" OnValidSubmit="@ValidateUserAsync">

    @if (LoginMessage != "" && LoginMessage != null)
    {
        <BSAlert Color="Color.Danger">@LoginMessage</BSAlert>
    }

    <DataAnnotationsValidator />
    <ValidationSummary />

    <BSFormGroup>
        <BSLabel For="inputEmail1">Email Adresse</BSLabel>
        <BSInput Id="inputEmail1" InputType="InputType.Email" PlaceHolder="Indtast email adresse.." @bind-Value="user.Email" />
    </BSFormGroup>
    <BSFormGroup>
        <BSLabel For="inputPassword">Adgangskode</BSLabel>
        <BSInput Id="inputPassword" InputType="InputType.Password" Placeholder="Indtast adgangskode.." @bind-Value="user.Password" />
    </BSFormGroup>
    <BSButton Color="Color.Info" ButtonType="ButtonType.Submit" Class="btn-block mr-2" IsDisabled="@IsProcessing">Log ind</BSButton>

</EditForm>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; }

    public string LoginMessage { get; set; }

    public bool IsProcessing { get; set; } = false;

    private User user;
    private ClaimsPrincipal claimsPrincipal;

    protected async override Task OnInitializedAsync()
    {
        user = new User();

        claimsPrincipal = (await AuthenticationState).User;

        if (claimsPrincipal.Identity.IsAuthenticated)
        {
            navigationManager.NavigateTo("admin");
        }
    }

    private async Task<bool> ValidateUserAsync()
    {
        IsProcessing = true;

        user = await userService.LoginAsync(user);

        if (user.IsAuthenticatedByServer)
        {
            if (user.Email != null)
            {
                await ((CustomAuthenticationStateProvider)authenticationStateProvider).MarkUserAuthenticated(user);
                navigationManager.NavigateTo("/admin");
            }
            else
            {
                LoginMessage = "Forkert email eller adgangskode";
            }
        }
        else
        {
            LoginMessage = "Noget gik galt, prøv igen senere..";
        }

        return await Task.FromResult(IsProcessing = false);
    }
}