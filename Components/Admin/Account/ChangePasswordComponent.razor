@page "/admin/account/changepassword"

@using System.Security.Claims
@using JobAgent.Data
@using JobAgent.Models
@using JobAgent.Services

@inject SecurityService SecurityService
@inject AdminService AdminService

@attribute [Authorize]

<EditForm Model="@authorizationModel" OnValidSubmit="OnValidSubmit_ChangeUserPassword">

    @if (AuthorizationMessage != "" && AuthorizationMessage != null)
    {
        <div class="alert alert-info">
            <div class="d-flex align-items-center">

                <span>@AuthorizationMessage</span>

                @if (!IsSuccess)
                {
                    <div class="spinner-border ml-auto" role="status" aria-hidden="true"></div>
                }

            </div>
        </div>
    }

    <ValidationSummary />
    <DataAnnotationsValidator />

    <BSFormGroup>
        <BSLabel For="inputEmail1">Email Adresse</BSLabel>
        <BSInput Id="inputEmail1" InputType="InputType.Email" IsReadonly="true" @bind-Value="authorizationModel.Email" />
    </BSFormGroup>
    <BSFormGroup>
        <BSLabel For="inputPassword">Adgangskode</BSLabel>
        <BSInput Id="inputPassword" InputType="InputType.Password" Placeholder="Indtast adgangskode.." @bind-Value="authorizationModel.Password" />
    </BSFormGroup>
    <BSFormGroup>
        <BSLabel For="inputConfirmPassword">Bekræft Adgangskode</BSLabel>
        <BSInput Id="inputConfirmPassword" InputType="InputType.Password" Placeholder="Bekræft adgangskode.." @bind-Value="authorizationModel.ConfirmPassword" />
    </BSFormGroup>
    <BSButton Color="Color.Info" ButtonType="ButtonType.Submit" Class="btn-block mr-2" IsDisabled="IsProcessing">Skift adgangskode</BSButton>

</EditForm>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    private string AuthorizationMessage { get; set; }
    private bool IsSuccess { get; set; } = false;
    private bool IsProcessing { get; set; } = false;
    private int Count { get; set; } = 10;

    private ChangePasswordModel authorizationModel = new ChangePasswordModel();
    private User user = new User()
    {
        ConsultantArea = new ConsultantArea(),
        Location = new Location()
    };
    private ClaimsPrincipal claim;
    private EditContext editContext;

    protected async override Task OnInitializedAsync()
    {
        editContext = new EditContext(authorizationModel);

        claim = (await AuthState).User;

        foreach (Claim item in claim.Claims)
        {
            if (item.Type == ClaimTypes.Email) authorizationModel.Email = item.Value;
        }
    }

    private void OnValidSubmit_ChangeUserPassword()
    {
        IsProcessing = true;
        IsSuccess = false;

        AuthorizationMessage = "Vent venligst..";

        user.Email = authorizationModel.Email;
        user.Password = authorizationModel.Password;

        var timer = new System.Threading.Timer(new System.Threading.TimerCallback(x =>
        {
            if (Count > 0)
            {
                Count--;

                InvokeAsync(() =>
                {
                    AdminService.UpdateUserPassword(user);
                    AuthorizationMessage = "Adgangskode blev ændret!";
                    StateHasChanged();
                });
            }
        }), null, 0, System.Threading.Timeout.Infinite);

        IsSuccess = true;
        IsProcessing = false;
    }
}
