@page "/login"

@using JobAgent.Models
@using JobAgent.Data.Objects
@using JobAgent.Data.Security
@using JobAgent.Data.Interfaces
@using JobAgent.Components.Redirect 

@inject MyAuthStateProvider MyAuthStateProvider
@inject IUserService UserService
@inject NavigationManager NavManager

<AuthorizeView>
    <Authorized>
        @if (true) { <RedirectToAdminComponent/> }
    </Authorized>
</AuthorizeView>

@* Login Form *@
<div class="container">
    <EditForm Model="UserLogInModel" OnValidSubmit="@ValidateLoginAsync">

        @if (!string.IsNullOrEmpty(LoginMessage))
        {
            <div class="alert alert-info">
                <div class="d-flex align-items-center">

                    <span>@LoginMessage</span>

                    @if (!IsSuccess)
                    {
                        <div class="spinner-border ml-auto" role="status" aria-hidden="true"></div>
                    }

                </div>
            </div>
        }

        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="inputEmail" class="admin-label">Email Adresse :</label>
            <input id="inputEmail" class="form-control" type="email" placeholder="Indtast email adresse.." @bind="UserLogInModel.Email" />
        </div>
        <hr />
        <div class="form-group">
            <label for="inputPassword" class="admin-label">Adgangskode :</label>
            <input id="inputPassword" class="form-control" type="password" placeholder="Indtast adgangskode.." @bind="UserLogInModel.Password" />
        </div>
        <hr />
        <button type="submit" class="btn btn-info ml-auto float-right mt-5" IsDisabled="IsProcessing">Log ind</button>

    </EditForm>
</div>

@code {
    [CascadingParameter]
    protected Task<AuthenticationState> AuthenticationState { get; set; }

    public LogInModel UserLogInModel { get; set; } = new LogInModel();

    public User User { get; set; } = new User();

    public string LoginMessage { get; set; } = String.Empty;

    public bool IsSuccess { get; set; }
    public bool IsProcessing { get; set; } = false;

    private async Task ValidateLoginAsync()
    {
        IsSuccess = false;
        IsProcessing = true;
        LoginMessage = "Vent venligst..";

        await Task.Delay(TimeSpan.FromSeconds(5));

        // Get values from the form.
        User.Email = UserLogInModel.Email.ToString();
        User.Password = UserLogInModel.Password;

        // Check if the email is valid.
        if (UserLogInModel.IsValidEmail(User.Email))
        {
            // Validate User credentials.
            User = await UserService.LoginAsync(User);

            // Check if the credentials is validated.
            if (User.IsAuthenticatedByServer)
            {
                await InvokeAsync(async () =>
                {
                    // Mark User as authenticated to the service.
                    await MyAuthStateProvider.MarkUserAsAuthenticated(User);
                    StateHasChanged();
                });

                // Redirecting..
                LoginMessage = "Logger ind..";

                NavManager.NavigateTo("/admin", true);
            }
            else
            {
                LoginMessage = "Email eller adgangskode er forkert.";
            }
        }
        else
        {
            LoginMessage = "Email er ikke gyldig.";
        }

        IsSuccess = true;
        IsProcessing = false;
    }
}