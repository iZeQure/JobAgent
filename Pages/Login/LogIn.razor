@page "/login"

@inject MyAuthStateProvider MyAuthStateProvider
@inject IUserService UserService
@inject NavigationManager NavManager

<AuthorizeView>
    <Authorized>
        @if (true)
        {<RedirectToAdminComponent />}
    </Authorized>
</AuthorizeView>

<MessageAlert FullWidth="false" Alert="MessageAlert.AlertType.Error" Message="@LoginMessage" />

@* Login Form *@
<div class="container">
    <EditForm Model="UserLogInModel" OnValidSubmit="@ValidateLoginAsync">

        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="inputEmail" class="admin-label">Email Adresse :</label>
            <input id="inputEmail" class="form-control form-control-sm" type="email" placeholder="Indtast email adresse.." @bind-value="UserLogInModel.Email" />
            <ValidationMessage For="@(() => UserLogInModel.Email)" />
        </div>
        <hr />
        <div class="form-group">
            <label for="inputPassword" class="admin-label">Adgangskode :</label>
            <input id="inputPassword" class="form-control form-control-sm" type="password" placeholder="Indtast adgangskode.." @bind-value="UserLogInModel.Password" />
            <ValidationMessage For="@(() => UserLogInModel.Password)" />
        </div>
        <hr />
        <button type="submit" class="btn btn-info ml-auto float-right mt-5" disabled="@IsProcessing">

            @if (IsProcessing)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <span>Validerer...</span>
            }
            else
            {
                <span>Log ind</span>
            }

        </button>

    </EditForm>
</div>

@code {
    [CascadingParameter]
    protected Task<AuthenticationState> AuthenticationState { get; set; }

    public LogInModel UserLogInModel { get; set; } = new LogInModel();

    public User User { get; set; } = new User();

    public string LoginMessage { get; set; } = String.Empty;
    public bool IsProcessing;

    private async Task ValidateLoginAsync()
    {
        IsProcessing = true;

        await Task.Delay(1500);

        // Get values from the form.
        User.Email = UserLogInModel.Email.ToString();
        User.Password = UserLogInModel.Password;

        // Check if the email is valid.
        if (UserLogInModel.IsValidEmail(User.Email))
        {
            // Validate User credentials.
            User = await UserService.LoginAsync(User);

            // Check if the credentials is validated.
            if (User.IsAuthenticatedByServer)
            {
                await InvokeAsync(async () =>
                {
                // Mark User as authenticated to the service.
                await MyAuthStateProvider.MarkUserAsAuthenticated(User);
                    StateHasChanged();
                });

                NavManager.NavigateTo("/admin", true);
            }
            else
            {
                LoginMessage = "Email eller adgangskode er forkert.";
            }
        }
        else
        {
            LoginMessage = "Email er ikke gyldig.";
        }

        await Task.Delay(1000);

        IsProcessing = false;
    }
}