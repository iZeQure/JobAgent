@page "/login"

@using System.Security.Claims
@using JobAgent.Models
@using JobAgent.Data
@using JobAgent.Data.Security
@using JobAgent.Data.Interfaces

@inject MyAuthStateProvider MyAuthStateProvider
@inject IUserService UserService
@inject NavigationManager NavManager
@* Login Form *@
<EditForm Model="UserLogInModel" OnValidSubmit="@ValidateLoginAsync">

    <div class="container">
        @if (!string.IsNullOrEmpty(LoginMessage))
        {
            <div class="alert alert-info">
                <div class="d-flex align-items-center">

                    <span>@LoginMessage</span>

                    @if (!IsSuccess)
                    {
                        <div class="spinner-border ml-auto" role="status" aria-hidden="true"></div>
                    }

                </div>
            </div>
        }
    </div>

    <DataAnnotationsValidator />
    <ValidationSummary />

    <BSFormGroup>
        <BSLabel For="inputEmail1">Email Adresse</BSLabel>
        <BSInput Id="inputEmail1" InputType="InputType.Email" PlaceHolder="Indtast email adresse.." @bind-Value="UserLogInModel.Email" />
    </BSFormGroup>
    <BSFormGroup>
        <BSLabel For="inputPassword">Adgangskode</BSLabel>
        <BSInput Id="inputPassword" InputType="InputType.Password" Placeholder="Indtast adgangskode.." @bind-Value="UserLogInModel.Password" />
    </BSFormGroup>
    <BSButton Color="Color.Info" ButtonType="ButtonType.Submit" Class="btn-block mr-2" IsDisabled="IsProcessing">Log ind</BSButton>

</EditForm>

@code {
    [CascadingParameter]
    protected Task<AuthenticationState> AuthenticationState { get; set; }

    public LogInModel UserLogInModel { get; set; } = new LogInModel();

    public User User { get; set; } = new User();

    public string LoginMessage { get; set; } = String.Empty;

    public bool IsSuccess { get; set; }
    public bool IsProcessing { get; set; } = false;

    private async Task<bool> ValidateLoginAsync()
    {
        IsProcessing = true;
        IsSuccess = false;
        LoginMessage = "Vent venligst...";

        await Task.Delay(3000);

        try
        {
            User.Email = UserLogInModel.Email;
            User.Password = UserLogInModel.Password;

            User = await UserService.LoginAsync(User);

            if (User.IsAuthenticatedByServer)
            {
                IsSuccess = true;
                IsProcessing = false;
                await MyAuthStateProvider.MarkUserAsAuthenticated(User);

                if (IsSuccess)
                {
                    NavManager.NavigateTo("/admin", true);
                }
            }
            else
            {
                LoginMessage = "Forkert email eller adgangskode.";
                IsSuccess = false;
            }

            IsProcessing = false;
        }
        catch (Exception)
        {
            IsSuccess = false;
            IsProcessing = false;
        }

        return await Task.FromResult(IsProcessing);
    }

    //private void ValidateUserAsync()
    //{
    //    IsProcessing = true;

    //    User.Email = UserLogInModel.Email;
    //    User.Password = UserLogInModel.Password;

    //    MyAuthStateProvider.User = UserSerivce.LoginAsync(User).Result;

    //    if (MyAuthStateProvider.User.IsAuthenticatedByServer)
    //    {
    //        if (MyAuthStateProvider.User.Email != null)
    //        {
    //            PageMetaModel.Instance.Title = $"Velkommen, {User.FirstName} {User.LastName}";

    //            MyAuthStateProvider.IsAuthenticated = true;
    //            MyAuthStateProvider.NotifyAuthenticationStateChanged();
    //            //await ((MyAuthStateProvider)AuthProvider).MarkUserAuthenticated(User);
    //        }
    //        else
    //        {
    //            LoginMessage = "Forkert email eller adgangskode.";
    //        }
    //    }
    //    else
    //    {
    //        LoginMessage = "Forkert email eller adgangskode.";
    //    }

    //    IsProcessing = false;
    //}
}