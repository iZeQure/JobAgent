@page "/admin/account/myprofile"

@using System.Security.Claims
@using JobAgent.Data
@using JobAgent.Data.Security
@using JobAgent.Services

@attribute [Authorize]

@inject MyAuthStateProvider MyAuthStateProvider
@inject DataService DataService
@inject AdminService AdminService
@inject NavigationManager NavigationManager

@if (User != null)
{
    <div class="container">
        @if (AuthorizationMessage != String.Empty && AuthorizationMessage != null)
        {
            <div class="alert alert-info">
                <div class="d-flex align-items-center">

                    <span>@AuthorizationMessage</span>

                    @if (!IsSuccess)
                    {
                        <div class="spinner-border ml-auto" role="status" aria-hidden="true"></div>
                    }

                </div>
            </div>
        }
    </div>

    <EditForm Model="User" OnValidSubmit="@OnValidSubmit_ChangeUserInformation">
        <div class="container">
            <div class="row">
                <div class="col">
                    <label for="inputEmail" class="admin-label">Email Adresse :</label>
                    <input id="inputEmail" type="email" class="form-control" placeholder="Email adresse" @bind-value="User.Email" />
                </div>
            </div>
            <hr />
            <div class="row">
                <div class="col">
                    <label for="inputFirstName" class="admin-label">Fornavn :</label>
                    <input id="inputFirstName" type="text" class="form-control" placeholder="Fornavn" @bind-value="User.FirstName" />
                </div>

                <div class="col">
                    <label for="inputLastName" class="admin-label">Efternavn :</label>
                    <input id="inputLastName" type="text" class="form-control" placeholder="Efternavn" @bind-value="User.LastName" />
                </div>
            </div>
            <hr />
            <div class="row">
                <div class="col">
                    <label for="inputConsultantArea" class="admin-label">Konsulent Område :</label>
                    <select class="form-control" @bind="User.ConsultantArea.Id">
                        @foreach (ConsultantArea area in ConsultantAreas)
                        {
                            @if (area.Id == User.ConsultantArea.Id)
                            {
                                <option value="@area.Id" selected>@area.Name</option>
                            }
                            else
                            {
                                <option value="@area.Id">@area.Name</option>
                            }
                        }
                    </select>
                </div>

                <div class="col">
                    <label for="inputLocation" class="admin-label">Lokation :</label>
                    <select class="form-control" @bind="User.Location.Id">
                        @foreach (Location lctn in Locations)
                        {
                            @if (lctn.Id == User.Location.Id)
                            {
                                <option value="@lctn.Id" selected>@lctn.Name</option>
                            }
                            else
                            {
                                <option value="@lctn.Id">@lctn.Name</option>
                            }
                        }
                    </select>
                </div>
            </div>
            <hr />
            <button type="submit" class="btn btn-info float-right ml-auto mt-5" disabled="@IsProcessing">Gem bruger oplysninger</button>
        </div>

    </EditForm>
}

@code {
    [CascadingParameter]
    protected Task<AuthenticationState> AuthState { get; set; }

    private List<ConsultantArea> ConsultantAreas { get; set; } = new List<ConsultantArea>();
    private List<Location> Locations { get; set; } = new List<Location>();
    private User User { get; set; } = new User();

    private string AuthorizationMessage { get; set; } = String.Empty;
    private string UserEmail { get; set; }
    private bool IsSuccess { get; set; } = false;
    private bool IsProcessing { get; set; } = false;

    private ClaimsPrincipal GetPrincipal;

    protected override async Task OnInitializedAsync()
    {
        await LoadAuthState();

        await LoadInformation();
    }

    private async Task LoadAuthState()
    {
        GetPrincipal = (await AuthState).User;

        foreach (Claim item in GetPrincipal.Claims)
        {
            // Get session values, to store inside the user object.
            if (item.Type == ClaimTypes.Email) UserEmail = item.Value;
        }
    }

    private async Task LoadInformation()
    {
        // Get user data, from the existing session data.
        User = await AdminService.GetUserByEmail(UserEmail);

        // Get Consulent areas and locations.
        ConsultantAreas = await DataService.GetAllConsultantAreasTask();
        Locations = await DataService.GetAllLocationsTask();
    }

    private async Task OnValidSubmit_ChangeUserInformation()
    {
        IsSuccess = false;
        IsProcessing = true;
        AuthorizationMessage = "Vent venligst..";

        await Task.Delay(TimeSpan.FromSeconds(5));

        await InvokeAsync(async () =>
        {
            await AdminService.UpdateUserInformation(User);
            AuthorizationMessage = "Bruger oplsyninger blev opdateret!";
            StateHasChanged();
        });

        NavigationManager.NavigateTo("/admin/account/myprofile", true);
        IsSuccess = true;
        IsProcessing = false;
    }
}
