@page "/admin/account/myprofile"

@attribute [Authorize]

@inject MyAuthStateProvider MyAuthStateProvider
@inject DataService DataService
@inject AdminService AdminService
@inject NavigationManager NavigationManager
@* Set page title *@
<PageTitle Title="Min Profil" />

<PageDisplayName DisplayName="Min Bruger Profil" />

@if (AccountModel != null)
{
    <MessageAlert Message="@ErrorMessage" FullWidth="false" Alert="MessageAlert.AlertType.Error" />
    <MessageAlert Message="@Message" FullWidth="false" Alert="MessageAlert.AlertType.Success" />

    <EditForm Model="AccountModel" OnValidSubmit="@OnValidSubmit_ChangeUserInformation">

        <DataAnnotationsValidator />

        <div class="container">
            <div class="row">
                <div class="col">
                    <label for="inputEmail" class="admin-label">Email Adresse :</label>
                    <input id="inputEmail" type="email" class="form-control form-control-sm" placeholder="Email adresse" @bind-value="AccountModel.Email" />
                </div>
            </div>
            <hr />
            <div class="row">
                <div class="col">
                    <label for="inputFirstName" class="admin-label">Fornavn :</label>
                    <input id="inputFirstName" type="text" class="form-control form-control-sm" placeholder="Fornavn" @bind-value="AccountModel.FirstName" />
                </div>

                <div class="col">
                    <label for="inputLastName" class="admin-label">Efternavn :</label>
                    <input id="inputLastName" type="text" class="form-control form-control-sm" placeholder="Efternavn" @bind-value="AccountModel.LastName" />
                </div>
            </div>
            <hr />
            <div class="row">
                <div class="col">
                    <label for="inputConsultantArea" class="admin-label">Konsulent Område :</label>
                    <select class="form-control form-control-sm" @bind="AccountModel.ConsultantAreaId">
                        @foreach (var area in ConsultantAreas)
                        {
                            @if (area.Id == AccountModel.ConsultantAreaId)
                            {
                                <option value="@area.Id" selected>@area.Name</option>
                            }
                            else
                            {
                                <option value="@area.Id">@area.Name</option>
                            }
                        }
                    </select>
                </div>

                <div class="col">
                    <label for="inputLocation" class="admin-label">Lokation :</label>
                    <select class="form-control form-control-sm" @bind="AccountModel.LocationId">
                        @foreach (var lctn in Locations)
                        {
                            @if (lctn.Id == AccountModel.LocationId)
                            {
                                <option value="@lctn.Id" selected>@lctn.Name</option>
                            }
                            else
                            {
                                <option value="@lctn.Id">@lctn.Name</option>
                            }
                        }
                    </select>
                </div>
            </div>
            <hr />
            <button type="submit" class="btn btn-info float-right ml-auto mt-5" disabled="@IsProcessing">
                @if (IsProcessing)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span>Gemmer oplysninger...</span>
                }
                else
                {
                    <span>Gem bruger oplysninger</span>
                }
            </button>
        </div>

    </EditForm>
}

@code {
    [CascadingParameter]
    protected Task<AuthenticationState> AuthState { get; set; }

    private AccountModel AccountModel = new AccountModel();

    private List<ConsultantArea> ConsultantAreas { get; set; } = new List<ConsultantArea>();
    private List<Location> Locations { get; set; } = new List<Location>();

    private string ErrorMessage { get; set; }
    private string Message { get; set; }
    private string UserEmail { get; set; }

    private bool IsProcessing;

    private ClaimsPrincipal GetPrincipal;

    protected override async Task OnInitializedAsync()
    {
        await LoadAuthState();

        await LoadInformation();
    }

    private async Task LoadAuthState()
    {
        GetPrincipal = (await AuthState).User;

        foreach (Claim item in GetPrincipal.Claims)
        {
            // Get session values, to store inside the user object.
            if (item.Type == ClaimTypes.Email) UserEmail = item.Value;
        }
    }

    private async Task LoadInformation()
    {
        // Get user data, from the existing session data.
        var user = await AdminService.GetUserByEmail(UserEmail);
        AccountModel = new AccountModel()
        {
            AccountId = user.Id,
            Email = user.Email,
            FirstName = user.FirstName,
            LastName = user.LastName,
            ConsultantAreaId = user.ConsultantArea.Id,
            LocationId = user.Location.Id
        };

        // Get Consulent areas and locations.
        ConsultantAreas = await DataService.GetAllConsultantAreasTask();
        Locations = await DataService.GetAllLocationsTask();
    }

    private async Task OnValidSubmit_ChangeUserInformation()
    {
        IsProcessing = true;
        bool result = false;

        await Task.Delay(500);

        await InvokeAsync(async () =>
        {
            result = await AdminService.UpdateUserInformation(AccountModel);
        });

        if (result)
        {
            Message = "Din bruger blev opdateret!";
            StateHasChanged();

            await Task.Delay(1000);
            NavigationManager.NavigateTo("/admin/account/myprofile", true);
        }
        else
            ErrorMessage = "Kunne ikke opdatere dine oplysninger!";

        IsProcessing = false;
        StateHasChanged();
    }
}
