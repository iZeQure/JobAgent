@page "/admin/account/changepassword"

@inject SecurityService SecurityService
@inject AdminService AdminService

@attribute [Authorize]

@* Page Title *@
<PageTitle Title="Skift Adgangskode" />

<PageDisplayName DisplayName="Skift Adgangskode" />

<div class="container">
    <EditForm Model="@authorizationModel" OnValidSubmit="OnValidSubmit_ChangeUserPassword">

        @if (AuthorizationMessage != "" && AuthorizationMessage != null)
        {
            <div class="alert alert-info">
                <div class="d-flex align-items-center">

                    <span>@AuthorizationMessage</span>

                    @if (!IsSuccess)
                    {
                        <div class="spinner-border ml-auto" role="status" aria-hidden="true"></div>
                    }

                </div>
            </div>
        }

        <ValidationSummary />
        <DataAnnotationsValidator />

        <BSFormGroup>
            <BSLabel For="inputEmail1" Class="admin-label">Email Adresse :</BSLabel>
            <BSInput Id="inputEmail1" InputType="InputType.Email" IsReadonly="true" @bind-Value="authorizationModel.Email" />
        </BSFormGroup>
        <hr />
        <BSFormGroup>
            <BSLabel For="inputPassword" Class="admin-label">Ny Adgangskode :</BSLabel>
            <BSInput Id="inputPassword" InputType="InputType.Password" Placeholder="Indtast adgangskode.." @bind-Value="authorizationModel.Password" />
        </BSFormGroup>
        <hr />
        <BSFormGroup>
            <BSLabel For="inputConfirmPassword" Class="admin-label">Bekræft Adgangskode :</BSLabel>
            <BSInput Id="inputConfirmPassword" InputType="InputType.Password" Placeholder="Bekræft adgangskode.." @bind-Value="authorizationModel.ConfirmPassword" />
        </BSFormGroup>
        <hr />
        <BSButton Color="Color.Info" ButtonType="ButtonType.Submit" Class="float-right ml-auto mt-5" IsDisabled="IsProcessing">Skift adgangskode</BSButton>

    </EditForm>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; }

    private string AuthorizationMessage { get; set; }
    private bool IsSuccess { get; set; } = false;
    private bool IsProcessing { get; set; } = false;

    private ChangePasswordModel authorizationModel = new ChangePasswordModel();
    private User user = new User();
    private ClaimsPrincipal claim;
    private EditContext editContext;

    protected async override Task OnInitializedAsync()
    {
        editContext = new EditContext(authorizationModel);

        claim = (await AuthState).User;

        foreach (Claim item in claim.Claims)
        {
            if (item.Type == ClaimTypes.Email) authorizationModel.Email = item.Value;
        }
    }

    private async Task OnValidSubmit_ChangeUserPassword()
    {
        IsProcessing = true;
        IsSuccess = false;

        AuthorizationMessage = "Vent venligst..";

        await Task.Delay(5000);

        user.Email = authorizationModel.Email;
        user.Password = authorizationModel.Password;

        await InvokeAsync(() =>
        {
            AdminService.UpdateUserPassword(user);
            AuthorizationMessage = "Adgangskode blev ændret!";
            StateHasChanged();
        });

        IsSuccess = true;
        IsProcessing = false;
    }
}
