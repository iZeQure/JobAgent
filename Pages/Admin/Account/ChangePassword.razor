@page "/admin/account/changepassword"

@inject SecurityService SecurityService
@inject AdminService AdminService

@attribute [Authorize]

@* Page Title *@
<PageTitle Title="Skift Adgangskode" />

<PageDisplayName DisplayName="Skift Adgangskode" />

<div class="container">
    <EditForm Model="@authorizationModel" OnValidSubmit="OnValidSubmit_ChangeUserPassword">

        @if (AuthorizationMessage != "" && AuthorizationMessage != null)
        {
            <div class="alert alert-info">
                <div class="d-flex align-items-center">

                    <span>@AuthorizationMessage</span>

                    @if (!IsSuccess)
                    {
                        <div class="spinner-border ml-auto" role="status" aria-hidden="true"></div>
                    }

                </div>
            </div>
        }

        <ValidationSummary />
        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="inputEmail1" class="admin-label">Email Adresse :</label>
            <input id="inputEmail1" type="email" readonly @bind="authorizationModel.Email" />
        </div>
        <hr />
        <div class="form-group">
            <label for="inputPassword" class="admin-label">Ny Adgangskode :</label>
            <input id="inputPassword" type="password" placeholder="Indtast adgangskode.." @bind="authorizationModel.Password" />
        </div>
        <hr />
        <div class="form-group">
            <label for="inputConfirmPassword" class="admin-label">Bekræft Adgangskode :</label>
            <input id="inputConfirmPassword" type="password" placeholder="Bekræft adgangskode.." @bind="authorizationModel.ConfirmPassword" />
        </div>
        <hr />
        <button type="submit" class="btn btn-sm btn-info float-right ml-auto mt-5">Skift adgangskode</button>

    </EditForm>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; }

    private string AuthorizationMessage { get; set; }
    private bool IsSuccess { get; set; } = false;
    private bool IsProcessing { get; set; } = false;

    private ChangePasswordModel authorizationModel = new ChangePasswordModel();
    private User user = new User();
    private ClaimsPrincipal claim;
    private EditContext editContext;

    protected async override Task OnInitializedAsync()
    {
        editContext = new EditContext(authorizationModel);

        claim = (await AuthState).User;

        foreach (Claim item in claim.Claims)
        {
            if (item.Type == ClaimTypes.Email) authorizationModel.Email = item.Value;
        }
    }

    private async Task OnValidSubmit_ChangeUserPassword()
    {
        IsProcessing = true;
        IsSuccess = false;

        AuthorizationMessage = "Vent venligst..";

        await Task.Delay(3000);

        user.Email = authorizationModel.Email;
        user.Password = authorizationModel.Password;

        await InvokeAsync(() =>
        {
            AdminService.UpdateUserPassword(user);
            AuthorizationMessage = "Adgangskode blev ændret!";
            StateHasChanged();
        });

        IsSuccess = true;
        IsProcessing = false;
    }
}
