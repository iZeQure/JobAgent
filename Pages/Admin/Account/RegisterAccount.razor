@page "/admin/account/register"

@attribute [Authorize]
@* Page Title *@
<PageTitle Title="Registrer Ny Konsulent" />

<PageDisplayName DisplayName="Opret en ny praktikkonsulent i systemet" />

<MessageAlert Alert="MessageAlert.AlertType.Info" Message="@SystemMessage" FullWidth="false" />
<MessageAlert Alert="MessageAlert.AlertType.Error" Message="@ErrorMessage" FullWidth="false" />
<MessageAlert Alert="MessageAlert.AlertType.Success" Message="@Message" FullWidth="false" />

<div class="container">

    @if (!IsLoadingInformation)
    {
        <EditForm Model="RegisterAccountModel" OnValidSubmit="OnValidSubmit_RegisterAccountAsync" autocomplete="off">

            <DataAnnotationsValidator />

            <div class="row">
                <div class="col">
                    <label for="inputEmail" class="admin-label">Email Adresse :</label>
                    @if (UserAlreadyExists)
                    {
                        <span class="d-inline-flex"><small class="text-danger font-weight-bolder">* Email er allerede tilknyttet en Praktikkonsulent.</small></span>
                    }
                    <input id="inputEmail" type="email" class="form-control form-control-sm" placeholder="Email adresse" @bind-value="RegisterAccountModel.Email" @onfocusout="OnFocusOut_CheckUserAlreadyExists" />
                    <ValidationMessage For="@(() => RegisterAccountModel.Email)" />
                </div>
            </div>
            <hr />
            <div class="row">
                <div class="col">
                    <label for="inputFirstName" class="admin-label">Fornavn :</label>
                    <input id="inputFirstName" type="text" class="form-control form-control-sm" placeholder="Fornavn" @bind-value="RegisterAccountModel.FirstName" />
                    <ValidationMessage For="@(() => RegisterAccountModel.FirstName)" />
                </div>

                <div class="col">
                    <label for="inputLastName" class="admin-label">Efternavn :</label>
                    <input id="inputLastName" type="text" class="form-control form-control-sm" placeholder="Efternavn" @bind-value="RegisterAccountModel.LastName" />
                    <ValidationMessage For="@(() => RegisterAccountModel.LastName)" />
                </div>
            </div>
            <hr />
            <div class="row">
                <div class="col">
                    <label for="inputConsultantArea" class="admin-label">Konsulent Område :</label>
                    <select class="form-control form-control-sm" @bind="RegisterAccountModel.ConsultantAreaId">
                        @if (!GetConsultantAreas.Any())
                        {
                            <option value="0" selected>Fandt ikke nogen områder..</option>
                        }
                        else
                        {
                            <option value="0" selected>Vælg et konsulent område</option>

                            @foreach (var c in GetConsultantAreas)
                            {
                                <option value="@c.Id">@c.Name</option>
                            }
                        }
                    </select>
                    <ValidationMessage For="@(() => RegisterAccountModel.ConsultantAreaId)" />
                </div>

                <div class="col">
                    <label for="inputLocation" class="admin-label">Lokation :</label>
                    <select class="form-control form-control-sm" @bind="RegisterAccountModel.LocationId">
                        @if (!GetLocations.Any())
                        {
                            <option value="0" selected>Fandt ikke nogen lokationer..</option>
                        }
                        else
                        {
                            <option value="0" selected>Vælg en lokation</option>

                            @foreach (var l in GetLocations)
                            {
                                <option value="@l.Id">@l.Name</option>
                            }
                        }
                    </select>
                    <ValidationMessage For="@(() => RegisterAccountModel.LocationId)" />
                </div>
            </div>
            <hr />
            <div class="row">
                <div class="col">
                    <label for="inputPassword" class="admin-label">Adgangskode :</label>
                    <input id="inputPassword" type="password" class="form-control form-control-sm" placeholder="Adgangskode" @bind="RegisterAccountModel.Password" />
                    <ValidationMessage For="@(() => RegisterAccountModel.Password)" />
                </div>

                <div class="col">
                    <label for="inputConfirmPassword" class="admin-label">Bekræft Adgangskode :</label>
                    <input id="inputConfirmPassword" type="password" class="form-control form-control-sm" placeholder="Bekræft adgangskode" @bind="RegisterAccountModel.ConfirmPassword" />
                    <ValidationMessage For="@(() => RegisterAccountModel.ConfirmPassword)" />
                    <ValidationSummary Model="RegisterAccountModel" />
                </div>
            </div>
            <button type="submit" class="btn btn-info float-right ml-auto mt-5" disabled="@(IsProcessing || UserAlreadyExists)">
                @if (IsProcessing)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span>Opretter Praktikkonsulent...</span>
                }
                else
                {
                    <span>Opret Praktikkonsulent</span>
                }
            </button>

        </EditForm>
    }
</div>

@code {
    [Inject] private IUserService UserService { get; set; }
    [Inject] private DataService DataService { get; set; }
    [Inject] private SecurityService SecurityService { get; set; }

    private RegisterAccountModel RegisterAccountModel { get; set; } = new RegisterAccountModel();

    private User User { get; set; } = new User() { ConsultantArea = new ConsultantArea(), Location = new Location() };

    public IEnumerable<ConsultantArea> GetConsultantAreas { get; protected set; } = new List<ConsultantArea>();
    public IEnumerable<Location> GetLocations { get; protected set; } = new List<Location>();

    public string SystemMessage { get; set; } = string.Empty;
    public string ErrorMessage { get; set; } = string.Empty;
    public string Message { get; set; } = string.Empty;
    public bool IsLoadingInformation { get; set; } = true;
    public bool IsProcessing { get; set; } = false;
    public bool UserAlreadyExists = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadInformationForModel();
    }

    private async Task LoadInformationForModel()
    {
        IsLoadingInformation = true;
        SystemMessage = "Henter nødvendig information..";

        await Task.Delay(1250);

        GetConsultantAreas = await DataService.GetAllConsultantAreasTask();
        GetLocations = await DataService.GetAllLocationsTask();

        await Task.Delay(1000);

        SystemMessage = string.Empty;
        IsLoadingInformation = false;
    }

    private async Task OnValidSubmit_RegisterAccountAsync()
    {
        if (!UserAlreadyExists)
        {
            IsProcessing = true;

            await Task.Delay(1750);

            if (UserService is UserService service)
            {
                if (!service.CheckUserExistsAsync(RegisterAccountModel.Email).Result)
                {
                    await InvokeAsync(async () =>
                    {
                        var result = await service.RegisterUserAsync(RegisterAccountModel);

                        if (string.IsNullOrEmpty(result.Email))
                            ErrorMessage = "Kunne ikke oprette Praktikkonsulent.";
                        else
                            Message = "Praktikkonsulent blev oprettet!";
                    });
                }
                else
                {
                    ErrorMessage = "Fejl, Praktikkonsulent eksistere allerede.";
                }
            }

            StateHasChanged();
            RegisterAccountModel = new RegisterAccountModel();

            await Task.Delay(1250);

            IsProcessing = false;
            SystemMessage = string.Empty;
            ErrorMessage = string.Empty;
            Message = string.Empty;
        }
    }

    private async void OnFocusOut_CheckUserAlreadyExists(FocusEventArgs e)
    {
        if (UserService is UserService service)
        {
            UserAlreadyExists = await service.CheckUserExistsAsync(RegisterAccountModel.Email);
        }
    }
}
