@page "/admin/settings/contracts"

@attribute [Authorize]

<div class="d-flex">
    <PageDisplayName DisplayName="Administrer Kontrakter" />
    <div class="d-inline-block">
        <a class="btn btn-sm btn-info cursor-pointer text-white" data-toggle="modal" data-target="#CreateContractModal">
            Opret ny Kontrakt
        </a>
    </div>
</div>

@if (GetContracts.Count == 0)
{
    <MessageAlert Alert="Components.Notification.MessageAlert.AlertType.System"
                  Message="Der blev ikke fundet nogen kontrakter."
                  MessageOptional="Opret kontrakter, ved at trykke på knappen : Opret ny Kontrakt." />
}
else
{
    <div class="table-responsive table-responsive-sm table-responsive-md">
        <table class="table table-sm table-striped table-hover">
            <caption>Liste over virksomheders kontrakter..</caption>
            <thead class="thead-dark">
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Virksomhed</th>
                    <th scope="col">Kontakt Person</th>
                    <th scope="col">Praktikkonsulent</th>
                    <th scope="col">Kontrakt</th>
                    <th scope="col">Kontrakt Oprettet</th>
                    <th scope="col">Udløbsdato</th>
                    <th scope="col"></th>
                    <th scope="col"></th>
                </tr>
            </thead>
            <tbody>

                @foreach (var contract in GetContracts)
                {
                    <tr id="@(contract.Id)">
                        <th scope="row">@(contract.Id)</th>
                        <td>@(contract.Company.Name)</td>
                        <td>@(contract.ContactPerson)</td>
                        <td>@(contract.SignedByUserId.FullName)</td>
                        @if (!string.IsNullOrEmpty(contract.ContractName))
                        {
                            <td>
                                <span @onclick="@(mouseClickEvent => OnClickOpen_Contract(GetLocationPath(contract.ContractName)))" class="table-icons" data-toggle="modal" data-target="#contractModal">
                                    <i class="fas fa-file-invoice"></i>
                                </span>
                            </td>
                        }
                        else
                        {
                            <td>Ingen kontrakt fundet.</td>
                        }
                        <td>@(contract.RegistrationDate.ToString("D"))</td>
                        <td>@(contract.ExpiryDate.ToString("D"))</td>
                        <td>
                            <span @onclick="(id => OnClickEdit_GetContractDetailsById(contract.Id))" data-toggle="modal" data-target="#EditContractModal">
                                <Popover Title="Ændre information" Body="Ved denne funktion, kan du ændre informationen på denne kontrakt." Color="Popover.PopoverType.Info" />
                            </span>
                        </td>
                        <td>
                            <span data-toggle="modal" data-target="#RemoveContractModal" @onclick="@(mouseEvent => OnClick_StoreContractId(contract.Id))">
                                <Popover Title="Forsigtig!" Body="Denne knap sletter den valgte kontrakt, forevigt!" Color="Popover.PopoverType.Danger" />
                            </span>
                        </td>
                    </tr>
                }

            </tbody>
        </table>
    </div>
}

<CreateContractModal />

<RemoveContractModal ContractId="ContractId" />

@* Contract Modal *@
<div class="modal fade" id="contractModal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Kontrakt</h5>
            </div>

            <div class="modal-body">
                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <div class="container-fluid">
                        <div class="alert alert-danger" role="alert">
                            @(ErrorMessage)
                        </div>
                    </div>
                }

                <div class="container-fluid justify-content-center">
                    <div class="embed-responsive embed-responsive-16by9">
                        <iframe src="data:application/pdf;base64,@(ContractPath)" class="embed-responsive-item" lang="da" title="Kontrakt Information" frameborder="1" allowtransparency="true"></iframe>
                    </div>
                </div>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-info" data-dismiss="modal">Luk kontrakt</button>
            </div>
        </div>
    </div>
</div>


@code {
    [Inject]
    protected IRefresh RefreshService { get; set; }

    [Inject]
    protected AdminService AdminService { get; set; }

    public ContractModel ContractModel { get; set; } = new ContractModel();

    public List<Contract> GetContracts { get; set; } = new List<Contract>();

    public Contract ContractDetails = new Contract() { Company = new Company(), SignedByUserId = new User() };

    public int ContractId { get; set; }

    public string UncServerPath { get; protected set; } = @"\\JOB-AGENT\contracts\";
    public string ContractPath { get; set; } = string.Empty;
    public string TempContractPath { get; set; } = string.Empty;
    public string ErrorMessage { get; set; } = string.Empty;
    public string MessageAlert { get; set; } = string.Empty;

    public bool IsProcessing { get; set; } = false;
    public bool IsSuccess { get; set; } = false;

    private IFileListEntry file;

    protected override async Task OnInitializedAsync()
    {
        RefreshService.RefreshRequest += RefreshContent;

        GetContracts = await AdminService.GetContracts();
    }

    private async void RefreshContent()
    {
        try
        {
            if (AdminService.GetContracts() != null)
                GetContracts = await AdminService.GetContracts();
            else
                GetContracts = null;
        }
        finally
        {
            StateHasChanged();
        }
    }

    private string GetLocationPath(string fileName)
    {
        try
        {
            var pdfFiles = Directory.EnumerateFiles(UncServerPath, "*.pdf");

            foreach (string currentFile in pdfFiles)
            {
                if (currentFile.Contains(fileName))
                {
                    Byte[] bytes = File.ReadAllBytes(currentFile);

                    return Convert.ToBase64String(bytes);
                }
            }

            return string.Empty;
        }
        catch (IOException)
        {
            ErrorMessage = "Kunne ikke bekræfte legitimationsoplysninger.";
            return string.Empty;
        }
        catch (UnauthorizedAccessException)
        {
            ErrorMessage = $"Adgang nægtet.";
            return string.Empty;
        }
        catch (Exception)
        {
            throw;
        }
    }

    private void OnClick_StoreContractId(int id)
    {
        ContractId = id;
    }

    private void OnClickOpen_Contract(string path)
    {
        ContractPath = path;
    }

    private void OnDateChange_Registered(DateTime args)
    {
        ContractDetails.RegistrationDate = args;
        StateHasChanged();
    }

    private void OnDateChange_Expiry(DateTime args)
    {
        ContractDetails.ExpiryDate = args;
        StateHasChanged();
    }



    private void ResetCreateContract()
    {
        ContractModel = new ContractModel();
    }

    private void ResetContractDetails()
    {
        ContractDetails = new Contract() { Company = new Company(), SignedByUserId = new User() };
    }

    private async void OnClickEdit_GetContractDetailsById(int contractId)
    {
        ContractDetails = await AService.GetContractById(contractId);
    }

    private async Task OnValidSubmit_UpdateContract()
    {
        IsProcessing = true;
        MessageAlert = "Vent venligst..";

        await AService.UpdateContract(ContractDetails);

        IsSuccess = true;
        IsProcessing = false;
        MessageAlert = "Virksomhed blev opdateret!";

        MessageAlert = string.Empty;

        GetContracts = await AService.GetContracts();

        await JSRuntime.InvokeVoidAsync("modalToggle", "contractDetails");
        await JSRuntime.InvokeVoidAsync("OnInformationChangeAnimation", $"{ContractDetails.Id}");
    }

    private async Task OnValidSubmit_CreateContract()
    {
        IsProcessing = true;

        if (file != null)
        {
            try
            {
                await AService.CreateContract(ContractModel);

                await InvokeAsync(async () =>
                {
                    GetContracts = await AService.GetContracts();

                    await JSRuntime.InvokeVoidAsync("modalToggle", "contractModalCreateNew");

                    StateHasChanged();
                });

                ContractModel = new ContractModel();
                file = null;
            }
            catch (Exception e)
            {
                MessageAlert = $"Kunne ikke oploade kontrakt..";
                Console.WriteLine(e.Message);
            }
        }
        else
        {
            MessageAlert = $"Vælg venligst en kontrakt!";
        }

        IsProcessing = false;
    }


}
