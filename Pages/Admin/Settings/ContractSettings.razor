@page "/admin/settings/contracts"

@inject AdminService AService
@inject DataService DService
@inject IFileUpload FileService
@inject IJSRuntime JSRuntime

@inherits ComponentBase

@attribute [Authorize]

<div class="d-flex">
    <PageDisplayName DisplayName="Administrer Kontrakter" />
    <div class="d-inline-block">
        <a class="btn btn-sm btn-info cursor-pointer text-white" data-toggle="modal" data-target="#contractModalCreateNew">
            Opret ny Kontrakt
        </a>
    </div>
</div>

@if (GetContracts.Count == 0)
{
    <MessageAlert Alert="Components.Notification.MessageAlert.AlertType.System"
                  Message="Der blev ikke fundet nogen kontrakter."
                  MessageOptional="Opret kontrakter, ved at trykke på knappen : Opret ny Kontrakt." />
}
else
{
    <div class="table-responsive table-responsive-sm table-responsive-md">
        <table class="table table-sm table-striped table-hover">
            <caption>Liste over virksomheders kontrakter..</caption>
            <thead class="thead-dark">
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Virksomhed</th>
                    <th scope="col">Kontakt Person</th>
                    <th scope="col">Praktikkonsulent</th>
                    <th scope="col">Kontrakt</th>
                    <th scope="col">Kontrakt Oprettet</th>
                    <th scope="col">Udløbsdato</th>
                    <th scope="col"></th>
                </tr>
            </thead>
            <tbody>

                @foreach (var contract in GetContracts)
                {
                    <tr id="@(contract.Id)">
                        <th scope="row">@(contract.Id)</th>
                        <td>@(contract.Company.Name)</td>
                        <td>@(contract.ContactPerson)</td>
                        <td>@(contract.SignedByUserId.FullName)</td>
                        @if (!string.IsNullOrEmpty(contract.ContractName))
                        {
                            <td>
                                <span @onclick="@(mouseClickEvent => OnClickOpen_Contract(GetLocationPath(contract.ContractName)))" class="table-icons" data-toggle="modal" data-target="#contractModal">
                                    <i class="fas fa-file-invoice"></i>
                                </span>
                            </td>
                        }
                        else
                        {
                            <td>Ingen kontrakt fundet.</td>
                        }
                        <td>@(contract.RegistrationDate.ToString("D"))</td>
                        <td>@(contract.ExpiryDate.ToString("D"))</td>
                        <td>
                            <span @onclick="(id => OnClickEdit_GetContractDetailsById(contract.Id))" data-toggle="modal" data-target="#contractDetails">
                                <Popover Title="Ændre information" Body="Ved denne funktion, kan du ændre informationen på denne kontrakt." Color="Popover.PopoverType.Info" />
                            </span>
                        </td>
                    </tr>
                }

            </tbody>
        </table>
    </div>
}

@* Contract Modal *@
<div class="modal fade" id="contractModal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Kontrakt</h5>
            </div>

            <div class="modal-body">
                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <div class="container-fluid">
                        <div class="alert alert-danger" role="alert">
                            @(ErrorMessage)
                        </div>
                    </div>
                }

                <div class="container-fluid justify-content-center">
                    <div class="embed-responsive embed-responsive-16by9">
                        <iframe src="data:application/pdf;base64,@(ContractPath)" class="embed-responsive-item" lang="da" title="Kontrakt Information" frameborder="1" allowtransparency="true"></iframe>
                    </div>
                </div>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-info" data-dismiss="modal">Luk kontrakt</button>
            </div>
        </div>
    </div>
</div>

@* Contract Modal Details *@
<div class="modal fade" id="contractDetails" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">

            <EditForm Model="ContractDetails" OnValidSubmit="OnValidSubmit_UpdateContract">

                <div class="modal-header">
                    <h5 class="modal-title">Kontrakt Information :</h5>
                </div>

                @if (!string.IsNullOrEmpty(MessageAlert))
                {
                    <div class="container-fluid">
                        <div class="alert alert-info">
                            <div class="d-flex align-items-center">

                                <span>@MessageAlert</span>

                                @if (IsProcessing)
                                {
                                    <div class="spinner-border ml-auto" role="status" aria-hidden="true"></div>
                                }
                                else if (!IsProcessing && IsSuccess)
                                {
                                    <div class="ml-auto"><i class="fas fa-check"></i></div>
                                }
                            </div>
                        </div>
                    </div>
                }

                <div class="modal-body">
                    <div class="row">
                        <div class="col">
                            <label for="inputCompany" class="admin-label col-form-label col-form-label-sm">Kontrakt for :</label>
                            <select id="inputCompany" class="form-control form-control-sm" @bind="ContractDetails.Company.Id">
                                @foreach (var company in GetCompanies)
                                {
                                    if (company.Id == ContractDetails.Company.Id)
                                    {
                                        <option value="@company.Id" selected>@company.Name</option>
                                    }
                                    else
                                    {
                                        <option value="@company.Id">@company.Name</option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="col">
                            <label for="inputSignedByUser" class="admin-label col-form-label col-form-label-sm">Underskrevet af :</label>
                            <select id="inputSignedByUser" class="form-control form-control-sm" @bind="ContractDetails.SignedByUserId.Id">
                                @foreach (var user in GetUsers)
                                {
                                    if (user.Id == ContractDetails.SignedByUserId.Id)
                                    {
                                        <option value="@user.Id" selected>@user.FullName</option>
                                    }
                                    else
                                    {
                                        <option value="@user.Id">@user.FullName</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>

                    <hr />

                    <div class="row">
                        <div class="col">
                            <label for="inputContactPerson" class="admin-label col-form-label col-form-label-sm">Virksomheds Kontakt Person :</label>
                            <input id="inputContactPerson" class="form-control form-control-sm" type="text" placeholder="Indtast en kontakt person.." @bind="ContractDetails.ContactPerson" />
                        </div>
                        <div class="col">
                            <label for="inputContractName" class="admin-label col-form-label col-form-label-sm">Kontraktens Navn : <span class="font-italic small" style="color: red;">*Ikke ændre dette hvis navnet på kontrakten ikke bliver ændret.</span></label>
                            <input id="inputContractName" class="form-control form-control-sm" type="text" placeholder="Indtast kontraktens fil navn / lokation.." disabled @bind="ContractDetails.ContractName" />
                        </div>
                    </div>

                    <hr />

                    <div class="row">
                        <div class="col">
                            <label for="inputRegisteredDate" class="admin-label col-form-label col-form-label-sm">Kontrakt Registreret Dato :</label>
                            @*<input id="inputRegisteredDate" class="form-control form-control-sm" type="datetime" placeholder="Registrerings dato for kontrakt.." value="@(ContractDetails.RegistrationDate)" />*@

                            <InputDate @bind-Value="@ContractDetails.RegistrationDate" TValue="DateTime" class="form-control form-control-sm"></InputDate>
                        </div>
                        <div class="col">
                            <label for="inputExpiryDate" class="admin-label col-form-label col-form-label-sm">Udløbsdato :</label>
                            @*<input id="inputExpiryDate" class="form-control form-control-sm" type="datetime" placeholder="Udløbsdato for kontrakt.." value="@(ContractDetails.ExpiryDate)" />*@

                            <InputDate @bind-Value="@ContractDetails.ExpiryDate" TValue="DateTime" class="form-control form-control-sm"></InputDate>
                        </div>
                    </div>

                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="ResetContractDetails" @onclick:preventDefault>Annuller</button>
                    <button class="btn btn-info text-light cursor-pointer" type="submit">Gem ændringer</button>
                </div>

            </EditForm>

        </div>
    </div>
</div>

@* Contract Modal Create New *@
<div id="contractModalCreateNew" class="modal fade" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">

            <EditForm Model="ContractModel" OnValidSubmit="OnValidSubmit_CreateContract">

                <div class="modal-header">
                    <h5 class="modal-title">Ny Kontrakt Information :</h5>
                </div>

                <div class="modal-body">

                    @if (!string.IsNullOrEmpty(MessageAlert))
                    {
                        <div class="container-fluid">
                            <div class="alert alert-warning alert-dismissible fade show" role="alert">
                                <strong>Fejl!</strong> @MessageAlert.
                                <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                        </div>
                    }

                    <ValidationSummary />
                    <DataAnnotationsValidator />

                    <div class="row">
                        <div class="col">
                            <label for="inputCompany" class="admin-label col-form-label col-form-label-sm">Kontrakt for :</label>
                            <select id="inputCompany" class="form-control form-control-sm" @bind="ContractModel.SignedWithCompany">
                                <option value="0" selected>---Vælg en virksomhed fra listen---</option>
                                @foreach (var company in GetCompanies)
                                {
                                    if (company.Id == ContractDetails.Company.Id)
                                    {
                                        <option value="@company.Id" selected>@company.Name</option>
                                    }
                                    else
                                    {
                                        <option value="@company.Id">@company.Name</option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="col">
                            <label for="inputSignedByUser" class="admin-label col-form-label col-form-label-sm">Underskrevet af :</label>
                            <select id="inputSignedByUser" class="form-control form-control-sm" @bind="ContractModel.SignedByUser">
                                <option value="0" selected>---Vælg en konsulent fra listen---</option>
                                @foreach (var user in GetUsers)
                                {
                                    if (user.Id == ContractDetails.SignedByUserId.Id)
                                    {
                                        <option value="@user.Id" selected>@user.FullName</option>
                                    }
                                    else
                                    {
                                        <option value="@user.Id">@user.FullName</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>

                    <hr />

                    <div class="row">
                        <div class="col">
                            <label for="inputContactPerson" class="admin-label col-form-label col-form-label-sm">Virksomheds Kontakt Person :</label>
                            <input id="inputContactPerson" class="form-control form-control-sm" type="text" placeholder="Indtast navnet på kontakt personen.." @bind="ContractModel.ContactPerson" />
                        </div>
                        <div class="col">
                            <label for="inputContractFile" class="admin-label col-form-label col-form-label-sm">Vælg Kontrakt : </label>
                            <div id="contractFileInput">
                                @if (true)
                                {
                                    <InputFile OnChange="HandleFileSelected" accept=".pdf" />
                                }
                                <div class="alert alert-light alert-dismissible fade show" role="alert">
                                    @ContractModel.ContractFileName
                                    <button type="button" class="close" data-dismiss="alert" @onclick="RemoveUploadedFile" aria-label="Close">
                                        <span aria-hidden="true">&times;</span>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <hr />

                    <div class="row">
                        <div class="col">
                            <label for="inputRegisteredDate" class="admin-label col-form-label col-form-label-sm">Kontrakt Registreret Dato :</label>
                            @*<input id="inputRegisteredDate" class="form-control form-control-sm" type="datetime" placeholder="Registrerings dato for kontrakt.." value="@(ContractDetails.RegistrationDate)" />*@

                            <InputDate TValue="DateTime" @bind-Value="@(ContractModel.RegistrationDate)" class="form-control form-control-sm" />
                        </div>
                        <div class="col">
                            <label for="inputExpiryDate" class="admin-label col-form-label col-form-label-sm">Udløbsdato :</label>
                            @*<input id="inputExpiryDate" class="form-control form-control-sm" type="datetime" placeholder="Udløbsdato for kontrakt.." value="@(ContractDetails.ExpiryDate)" />*@

                            <InputDate TValue="DateTime" @bind-Value=@(ContractModel.ExpiryDate) class="form-control form-control-sm" disabled />
                        </div>
                    </div>

                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="ResetCreateContract" @onclick:preventDefault>Annuller</button>
                    <button class="btn btn-info text-light cursor-pointer" type="submit" disabled="@IsProcessing">Gem ændringer</button>
                </div>

            </EditForm>

        </div>
    </div>
</div>

@code {
    public ContractModel ContractModel { get; set; } = new ContractModel();

    public List<User> GetUsers { get; set; } = new List<User>();
    public List<Company> GetCompanies { get; set; } = new List<Company>();
    public List<Contract> GetContracts { get; set; } = new List<Contract>();

    public Contract ContractDetails = new Contract() { Company = new Company(), SignedByUserId = new User() };

    public string UncServerPath { get; protected set; } = @"\\JOB-AGENT\contracts\";
    public string ContractPath { get; set; } = string.Empty;
    public string TempContractPath { get; set; } = string.Empty;
    public string ErrorMessage { get; set; } = string.Empty;
    public string MessageAlert { get; set; } = string.Empty;

    public bool IsProcessing { get; set; } = false;
    public bool IsSuccess { get; set; } = false;

    private IFileListEntry file;

    protected override async Task OnInitializedAsync()
    {
        GetContracts = await AService.GetContracts();
        GetCompanies = await DService.GetAllCompanies();
        GetUsers = await DService.GetUsers();
    }

    private string GetLocationPath(string fileName)
    {
        try
        {
            var pdfFiles = Directory.EnumerateFiles(UncServerPath, "*.pdf");

            foreach (string currentFile in pdfFiles)
            {
                if (currentFile.Contains(fileName))
                {
                    Byte[] bytes = File.ReadAllBytes(currentFile);

                    return Convert.ToBase64String(bytes);
                }
            }

            return string.Empty;
        }
        catch (IOException)
        {
            ErrorMessage = "Kunne ikke bekræfte legitimationsoplysninger.";
            return string.Empty;
        }
        catch (UnauthorizedAccessException)
        {
            ErrorMessage = $"Adgang nægtet.";
            return string.Empty;
        }
        catch (Exception)
        {
            throw;
        }
    }

    private void OnClickOpen_Contract(string path)
    {
        ContractPath = path;
    }

    private void OnDateChange_Registered(DateTime args)
    {
        ContractDetails.RegistrationDate = args;
        StateHasChanged();
    }

    private void OnDateChange_Expiry(DateTime args)
    {
        ContractDetails.ExpiryDate = args;
        StateHasChanged();
    }

    private void RemoveUploadedFile(MouseEventArgs e)
    {
        file = null;
        ContractModel.ContractFileName = string.Empty;
        TempContractPath = string.Empty;
    }

    private void ResetCreateContract()
    {
        ContractModel = new ContractModel();
    }

    private void ResetContractDetails()
    {
        ContractDetails = new Contract() { Company = new Company(), SignedByUserId = new User() };
    }

    private async void OnClickEdit_GetContractDetailsById(int contractId)
    {
        ContractDetails = await AService.GetContractById(contractId);
    }

    private async Task OnValidSubmit_UpdateContract()
    {
        IsProcessing = true;
        MessageAlert = "Vent venligst..";

        await AService.UpdateContract(ContractDetails);

        IsSuccess = true;
        IsProcessing = false;
        MessageAlert = "Virksomhed blev opdateret!";

        MessageAlert = string.Empty;

        GetContracts = await AService.GetContracts();

        await JSRuntime.InvokeVoidAsync("modalToggle", "contractDetails");
        await JSRuntime.InvokeVoidAsync("OnInformationChangeAnimation", $"{ContractDetails.Id}");
    }

    private async Task OnValidSubmit_CreateContract()
    {
        IsProcessing = true;

        if (file != null)
        {
            try
            {
                await AService.CreateContract(ContractModel);

                await InvokeAsync(async () =>
                {
                    GetContracts = await AService.GetContracts();

                    await JSRuntime.InvokeVoidAsync("modalToggle", "contractModalCreateNew");

                    StateHasChanged();
                });

                ContractModel = new ContractModel();
                file = null;
            }
            catch (Exception e)
            {
                MessageAlert = $"Kunne ikke oploade kontrakt..";
                Console.WriteLine(e.Message);
            }
        }
        else
        {
            MessageAlert = $"Vælg venligst en kontrakt!";
        }

        IsProcessing = false;
    }

    private async Task HandleFileSelected(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();

        if (file != null)
        {
            await FileService.UploadFileAsync(file);

            ContractModel.ContractFileName = file.Name;
        }
    }
}
