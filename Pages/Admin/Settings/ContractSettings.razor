@page "/admin/settings/contracts"

@attribute [Authorize]

<div class="d-flex">
    <PageDisplayName DisplayName="Administrer Kontrakter" />
    <div class="d-inline-block">
        <a class="btn btn-sm btn-info cursor-pointer text-white" data-toggle="modal" data-target="#CreateContractModal">
            Opret ny Kontrakt
        </a>
    </div>
</div>

@if (GetContracts.Count == 0)
{
    <MessageAlert Alert="Components.Notification.MessageAlert.AlertType.System"
                  Message="Der blev ikke fundet nogen kontrakter."
                  MessageOptional="Opret kontrakter, ved at trykke på knappen : Opret ny Kontrakt." />
}
else
{
    <div class="table-responsive table-responsive-sm table-responsive-md">
        <table class="table table-sm table-striped table-hover">
            <caption>Liste over virksomheders kontrakter..</caption>
            <thead class="thead-dark">
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Virksomhed</th>
                    <th scope="col">Kontakt Person</th>
                    <th scope="col">Praktikkonsulent</th>
                    <th scope="col">Kontrakt</th>
                    <th scope="col">Kontrakt Oprettet</th>
                    <th scope="col">Udløbsdato</th>
                    <th scope="col"></th>
                    <th scope="col"></th>
                </tr>
            </thead>
            <tbody>

                @foreach (var contract in GetContracts)
                {
                    <tr id="@(contract.Id)">
                        <th scope="row">@(contract.Id)</th>
                        <td>@(contract.Company.Name)</td>
                        <td>@(contract.ContactPerson)</td>
                        <td>@(contract.SignedByUserId.FullName)</td>
                        @if (!string.IsNullOrEmpty(contract.ContractName))
                        {
                            <td>
                                <span @onclick="@(mouseClickEvent => OnClick_ShowContractModal(contract.ContractName))" class="table-icons" data-toggle="modal" data-target="#ShowContractModal">
                                    <i class="fas fa-file-invoice"></i>
                                </span>
                            </td>
                        }
                        else
                        {
                            <td>Ingen kontrakt fundet.</td>
                        }
                        <td>@(contract.RegistrationDate.ToString("D"))</td>
                        <td>@(contract.ExpiryDate.ToString("D"))</td>
                        <td>
                            <span @onclick="(id => OnClick_OpenEditModal(contract.Id))" data-toggle="modal" data-target="#EditContractModal">
                                <Popover Title="Ændre information" Body="Ved denne funktion, kan du ændre informationen på denne kontrakt." Color="Popover.PopoverType.Info" />
                            </span>
                        </td>
                        <td>
                            <span @onclick="@(mouseEvent => OnClick_RemoveContractModal(contract.Id))" data-toggle="modal" data-target="#RemoveContractModal">
                                <Popover Title="Forsigtig!" Body="Denne knap sletter den valgte kontrakt, forevigt!" Color="Popover.PopoverType.Danger" />
                            </span>
                        </td>
                    </tr>
                }

            </tbody>
        </table>
    </div>
}

<CreateContractModal />

<EditContractModal ContractModel="ContractModel" />

<RemoveContractModal ContractId="ContractId" />

<ShowContractModal ContractName="@ContractName" />

@code {
    [Inject]
    protected IRefresh RefreshService { get; set; }

    [Inject]
    protected AdminService AdminService { get; set; }

    public List<Contract> GetContracts { get; set; } = new List<Contract>();

    private ContractModel ContractModel { get; set; } = new ContractModel();

    private int ContractId { get; set; }

    private string ContractName { get; set; }

    private bool Validation { get; set; }

    protected override async Task OnInitializedAsync()
    {
        RefreshService.RefreshRequest += RefreshContent;

        GetContracts = await AdminService.GetContracts();
    }

    private async void RefreshContent()
    {
        try
        {
            if (AdminService.GetContracts() != null)
                GetContracts = await AdminService.GetContracts();
            else
                GetContracts = null;
        }
        finally
        {
            StateHasChanged();
        }
    }

    private void OnClick_RemoveContractModal(int id)
    {
        ContractId = id;
    }

    private void OnClick_ShowContractModal(string name)
    {
        ContractName = name;
    }

    private async void OnClick_OpenEditModal(int contractId)
    {
        var contract = await AdminService.GetContractById(contractId);

        ContractModel = new ContractModel()
        {
            Id = contract.Id,
            SignedWithCompany = contract.Company.Id,
            SignedByUser = contract.SignedByUserId.Id,
            ContactPerson = contract.ContactPerson,
            ContractFileName = contract.ContractName,
            RegistrationDate = contract.RegistrationDate,
            ExpiryDate = contract.ExpiryDate
        };
    }
}
