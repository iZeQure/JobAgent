@page "/admin/settings/job/vacancies"

@attribute [Authorize]

<PageTitle Title="Indstillinger for Stillingsopslag" />

<div class="d-flex">
    <PageDisplayName DisplayName="Administrer Stillingsopslag" />
    <div class="d-inline-block">

        @if (disabled)
        {
            <a class="btn btn-sm btn-info cursor-pointer text-white disabled">
                <span>Ikke Aktiveret</span>
            </a>
            <span class="d-inline-block"><small class="text-danger font-weight-bolder">* Opret en Virksomhed for at benytte stillingsopslag.</small></span>
        }
        else
        {
            <a class="btn btn-sm btn-info cursor-pointer text-white" data-toggle="modal" data-target="#CreateJobVacancyModal">
                Opret nyt Stillingsopslag
            </a>
        }

    </div>
</div>

@if (Adverts.Count == 0)
{
    <MessageAlert Alert="MessageAlert.AlertType.Warning"
                  Message="Der blev ikke fundet nogen stillingsopslag."
                  MessageOptional="Opret opslag, ved at trykke på knappen : Opret nyt Stillingsopslag. - Hvis knappen ikke er aktiveret, er det fordi der ikke blev fundet nogen virksomheder." />
}
else
{
    <div class="table-responsive table-responsive-sm table-responsive-md">
        <table class="table table-sm table-striped table-hover">
            <caption>Liste over stillingsopslag..</caption>
            <thead class="thead-dark">
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Titel</th>
                    <th scope="col">Job Kategory</th>
                    <th scope="col">Virksomhed</th>
                    <th scope="col">Opslag Registeret</th>
                    <th scope="col">Ansøgningsfrist</th>
                    <th scope="col"></th>
                    <th scope="col"></th>
                </tr>
            </thead>
            <tbody>

                @foreach (var item in Adverts)
                {
                    <tr id="@item.Id">
                        <th scope="row">@item.Id</th>
                        <td class="text-truncate d-inline-block">@item.Title</td>
                        @if (string.IsNullOrEmpty(item.Specialization.Name))
                        {
                            <td>@item.Category.Name</td>
                        }
                        else
                        {
                            <td>@item.Specialization.Name</td>
                        }
                        <td>@item.Company.Name</td>
                        <td>@item.JobRegisteredDate.ToString("D")</td>
                        <td>@item.DeadlineDate.ToString("D")</td>
                        <td>
                            <span @onclick="(id => OnClickEdit_GetJobVacancyDetailsById(item.Id))" data-toggle="modal" data-target="#EditJobVacancyModal">
                                <Popover Title="Ændre information" Body="Ved denne funktion, kan du ændre informationen på dette opslag." Color="Popover.PopoverType.Info" />
                            </span>
                        </td>
                        <td>
                            <span @onclick="@(id => OnClick_StoreId(item.Id))" data-toggle="modal" data-target="#RemoveJobVacancyModal">
                                <Popover Title="Forsigtig!" Body="Denne knap sletter det valgte opslag, forevigt!" Color="Popover.PopoverType.Danger" />
                            </span>
                        </td>
                    </tr>
                }

            </tbody>
        </table>
    </div>
}

<CreateJobVacancyModal />

<EditJobVacancyModal Model="JobVacancyModel" />

<RemoveJobVacancyModal Id="AdvertId" />

@code {
    [Inject] private AdminService AdminService { get; set; }
    [Inject] private DataService DataService { get; set; }
    [Inject] private IJSRuntime JSRuntime { get; set; }
    [Inject] private IRefresh Refresh { get; set; }

    private List<JobAdvert> Adverts = new List<JobAdvert>();
    private JobVacancyModel JobVacancyModel;

    public int AdvertId { get; set; } = 0;

    public bool IsProcessing { get; set; } = false;

    private bool disabled = false;

    protected override async Task OnInitializedAsync()
    {
        Refresh.RefreshRequest += RefreshAsync;

        if (!(await DataService.GetAllCompanies()).Any()) disabled = true;

        Adverts = await AdminService.GetJobVacancies() as List<JobAdvert>;
    }

    private async void RefreshAsync()
    {
        Adverts = await AdminService.GetJobVacancies() as List<JobAdvert>;

        StateHasChanged();
    }

    public async Task OnClickEdit_GetJobVacancyDetailsById(int id)
    {
        var details = await AdminService.GetJobVacancyDetailsById(id);

        JobVacancyModel = new JobVacancyModel()
        {
            Id = details.Id,
            Title = details.Title,
            Email = details.Email,
            PhoneNumber = details.PhoneNumber,
            Description = details.JobDescription,
            Location = details.JobLocation,
            CompanyId = details.Company.Id,
            SourceURL = details.SourceURL,
            RegisteredDate = details.JobRegisteredDate,
            DeadlineDate = details.DeadlineDate,
            CategoryId = details.Category.Id,
            SpecializationId = details.Specialization.Id
        };
    }

    public void OnClick_StoreId(int id)
    {
        AdvertId = id;
    }
}
