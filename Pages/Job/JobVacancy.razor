@page "/job/{JobAdvertId:int}/{JobAdvertName}";
@page "/job/{JobAdvertId:int}/{JobAdvertName}/{SpecializationId:int}/{SpecializationName}";

@inject JobService JobService
@* Set Job as Page Title *@
<PageTitle Title="@JobAdvertName" />

@if (jobAdverts == null || !jobAdverts.Any())
{
    if (IsLoading)
    {
        <MessageAlert Alert="MessageAlert.AlertType.Info" Message="Vent Venligst!" MessageOptional="Henter stillingsopslag.." IsLoading="IsLoading" FullWidth="false" />
    }
    else
    {
        <MessageAlert Alert="MessageAlert.AlertType.Warning" Message="Beklager! Job Agenten fandt ingen stillinger inden for denne kategori." FullWidth="false" />
    }
}
else
{
    <div class="card-columns">
        @foreach (var j in jobAdverts.OrderBy(date => date.JobRegisteredDate))
        {
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">@j.Title</h5>
                    <h6 class="card-subtitle mb-2 text-muted">@(j.Company.Name), @(j.JobLocation)</h6>
                    <p class="card-text">@j.JobDescription</p>
                    <p class="card-text">
                        <small class="text-muted">
                            @j.JobRegisteredDate.ToString("dddd, d MMM yyyy", CultureInfo.CreateSpecificCulture("da-DK"))
                        </small>
                    </p>
                    <button @onclick="@(id => OnJobPostDetail(j.Id))" class="btn btn-info btn-sm d-block" type="button" data-toggle="modal" data-target="#DetailsVacancyModal">Se Detailjer</button>
                </div>
            </div>
        }
    </div>
}

<DetailsVacancyModal Details="jobAdvert" />

@code {
    [Parameter]
    public int JobAdvertId { get; set; }

    [Parameter]
    public string JobAdvertName { get; set; }

    [Parameter]
    public int SpecializationId { get; set; }

    [Parameter]
    public string SpecializationName { get; set; }

    JobAdvert jobAdvert = new JobAdvert() { Company = new Company(), Category = new Category(), Specialization = new Specialization() };

    List<JobAdvert> jobAdverts = new List<JobAdvert>();

    private bool IsLoading { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        await Task.Delay(1500);

        if (SpecializationId == 0)
            jobAdverts = await JobService.GetJobVacanciesAsync(JobAdvertId, JobAdvertName);

        if (SpecializationId != 0)
            jobAdverts = await JobService.GetJobSpecialVacanciesAsync(SpecializationId, SpecializationName);
        else if (SpecializationId > 0)
            jobAdverts = await JobService.GetJobSpecialVacanciesAsync(SpecializationId, SpecializationName);

        IsLoading = false;
        await Task.Delay(500);
    }

    protected override async Task OnParametersSetAsync()
    {
        IsLoading = true;
        await Task.Delay(1500);

        if (SpecializationId == 0)
            jobAdverts = await JobService.GetJobVacanciesAsync(JobAdvertId, JobAdvertName);

        if (SpecializationId != 0)
            jobAdverts = await JobService.GetJobSpecialVacanciesAsync(SpecializationId, SpecializationName);
        else if (SpecializationId > 0)
            jobAdverts = await JobService.GetJobSpecialVacanciesAsync(SpecializationId, SpecializationName);

        IsLoading = false;
        await Task.Delay(500);
    }

    void OnJobPostDetail(int id)
    {
        // Get details for job advert.

        jobAdvert = (from job in jobAdverts
                     where job.Id == id
                     select job).FirstOrDefault();
    }
}