@page "/job/uncategorized"
@page "/job/{JobAdvertId:int}"
@page "/job/{JobAdvertId:int}/{SpecializationId:int}"

<PageTitle Title="Job" />

@if (jobAdverts == null || !jobAdverts.Any())
{
    if (IsLoading)
    {
        <MessageAlert Alert="MessageAlert.AlertType.Info" Message="Vent Venligst!" MessageOptional="Henter stillingsopslag.." IsLoading="IsLoading" FullWidth="false" />
    }
    else
    {
        <MessageAlert Alert="MessageAlert.AlertType.Warning" Message="Beklager! Job Agenten fandt ingen stillinger inden for denne kategori." FullWidth="false" />
    }
}
else
{
    <div class="card-columns">
        @foreach (var j in jobAdverts.OrderBy(date => date.JobRegisteredDate))
        {
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">
                        <a class="card-link" href="@(AppendWorldWideWebToStringIfNotExists(j.SourceURL).GetAwaiter().GetResult())" target="_blank">
                            @(j.Title)
                        </a>
                    </h5>
                    <h6 class="card-subtitle mb-2 text-muted">@(j.Company.Name), @(j.JobLocation)</h6>
                    <p class="card-text">@(DataService.TruncateString(j.JobDescription, 150))</p>
                    <p class="card-text">
                        <small class="text-muted">
                            Oprettet: @j.JobRegisteredDate.ToString("dddd, d MMM yyyy", CultureInfo.CreateSpecificCulture("da-DK"))
                        </small>
                    </p>
                    <button @onclick="@(clickEvent => GetJobAdvertDetails(j.Id))" class="btn btn-info btn-sm d-block" type="button" data-toggle="modal" data-target="#DetailsVacancyModal">Se Detailjer</button>
                </div>
            </div>
        }
    </div>
}

<DetailsVacancyModal Id="JobAdvertDetailsId" Details="AdvertDetails" />

@code {
    [Parameter] public int JobAdvertId { get; set; }
    [Parameter] public string JobAdvertName { get; set; }
    [Parameter] public int SpecializationId { get; set; }
    [Parameter] public string SpecializationName { get; set; }

    [Inject] protected JobService JobService { get; set; }
    [Inject] protected NavigationManager NavigationManager { get; set; }

    List<JobAdvert> jobAdverts = new List<JobAdvert>();

    private JobAdvert AdvertDetails;

    private bool IsLoading { get; set; } = false;

    private int JobAdvertDetailsId;

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += HandleLocationChanged;
    }

    protected override async Task OnParametersSetAsync()
    {
        await InvokeAsync(async () =>
        {
            await LoadJobVacancyData();
        });
    }

    private async void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        await LoadJobVacancyData();
    }

    private async void GetJobAdvertDetails(int advertId)
    {
        if (advertId != 0)
        {
            JobAdvertDetailsId = advertId;
            AdvertDetails = await JobService.GetJobVacancyById(advertId);
        }
    }

    private async Task LoadJobVacancyData()
    {
        IsLoading = true;

        try
        {
            if (JobAdvertId == 0)
            {
                jobAdverts = (await JobService.GetUncategorizedJobVacancies());
            }
            else if (SpecializationId == 0)
            {
                jobAdverts = (await JobService.GetJobVacanciesAsync(JobAdvertId)).ToList();
            }
            else if (SpecializationId != 0)
            {
                jobAdverts = (await JobService.GetJobSpecialVacanciesAsync(SpecializationId)).ToList();
            }
        }
        finally
        {
            IsLoading = false;
            await Task.CompletedTask;

            StateHasChanged();
        }
    }

    private async Task<string> AppendWorldWideWebToStringIfNotExists(string url)
    {
        if (string.IsNullOrEmpty(url))
            return await Task.FromResult(string.Empty);

        if (url.Contains("www"))
            return await Task.FromResult(url);

        else
            return await Task.FromResult(string.Concat("https://www.", url));
    }
}