@using JobAgentClassLibrary.Common.JobAdverts.Entities
@using JobAgentClassLibrary.Common.Companies
@using JobAgentClassLibrary.Common.Companies.Entities
@using JobAgentClassLibrary.Common.VacantJobs
@using JobAgentClassLibrary.Common.VacantJobs.Entities

@if (JobAdvert is not null)
{
    <div class="card" style="max-width: 540px;">
        <div class="row g-0">
            <div class="col-md-12">
                <div class="card-body">
                    <h5 class="card-title">@JobAdvert.Title</h5>

                    @if (_company is not null)
                    {
                        <p class="card-subtitle"><small>@_company.Name</small></p>
                    }

                    <p class="card-text card-content">@JobAdvert.Summary</p>

                    <p class="card-subtitle"><small>Oprettet: @ConvertDateTimeToCultureInfo()</small></p>

                    @if (_vacantJob is not null)
                    {
                        <a href="@_vacantJob.URL" class="btn btn-outline-light">Se Stilling</a>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public IJobAdvert JobAdvert { get; set; }
    [Inject] protected ICompanyService CompanyService { get; set; }
    [Inject] protected IVacantJobService VacantJobService { get; set; }

    private ICompany _company;
    private IVacantJob _vacantJob;

    protected override async Task OnInitializedAsync()
    {
        _vacantJob = await VacantJobService.GetByIdAsync(JobAdvert.Id);
        _company = await CompanyService.GetByIdAsync(_vacantJob.CompanyId);
    }

    private string ConvertDateTimeToCultureInfo()
    {
        return JobAdvert
                    .RegistrationDateTime
                    .ToString("dddd d MMM yyyy", CultureInfo.CreateSpecificCulture("da-DK"));
    }
}
