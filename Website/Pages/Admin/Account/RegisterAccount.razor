@page "/admin/account/register"

@attribute [Authorize]
@* Page Title *@
<PageTitle Title="Registrer Ny Konsulent" />

<PageDisplayName DisplayName="Opret en ny praktikkonsulent i systemet" />

@if (!string.IsNullOrEmpty(errorMessage))
{
    @if (errorOcurred)
    {
        <MessageAlert Alert="MessageAlert.AlertType.Error" Message="@errorMessage" FullWidth="false" />
    }
    else
    {
        <MessageAlert Alert="MessageAlert.AlertType.Warning" Message="@errorMessage" FullWidth="false" />
    }

}

@if (!string.IsNullOrEmpty(infoMessage))
{
    <MessageAlert Alert="MessageAlert.AlertType.Success" Message="@infoMessage" FullWidth="false" />
}

<div class="container">

    @if (dataIsLoading)
    {
        <MessageAlert Alert="MessageAlert.AlertType.Info" Message="Henter oplysninger.." IsLoading="@dataIsLoading" />
    }
    else
    {
        <EditForm Model="regAccModel" OnValidSubmit="OnValidSubmit_RegisterAccountAsync" autocomplete="off">

            <DataAnnotationsValidator />

            <div class="row">
                <div class="col">
                    <label for="inputEmail" class="admin-label">Email Adresse :</label>
                    @if (emailExists)
                    {
                        <span class="d-inline-flex ml-2"><small class="text-danger font-weight-bolder">* Email er allerede tilknyttet en Bruger.</small></span>
                    }
                    <input id="inputEmail" type="email" class="form-control form-control-sm" placeholder="Email adresse" @bind-value="regAccModel.Email" @onfocusout="OnEmailFocusOut_CheckForExistence" />
                    <ValidationMessage For="@(() => regAccModel.Email)" />
                </div>
            </div>
            <hr />
            <div class="row">
                <div class="col">
                    <label for="inputFirstName" class="admin-label">Fornavn :</label>
                    <input id="inputFirstName" type="text" class="form-control form-control-sm" placeholder="Fornavn" @bind-value="regAccModel.FirstName" />
                    <ValidationMessage For="@(() => regAccModel.FirstName)" />
                </div>

                <div class="col">
                    <label for="inputLastName" class="admin-label">Efternavn :</label>
                    <input id="inputLastName" type="text" class="form-control form-control-sm" placeholder="Efternavn" @bind-value="regAccModel.LastName" />
                    <ValidationMessage For="@(() => regAccModel.LastName)" />
                </div>
            </div>
            <hr />
            <div class="row">
                <div class="col">
                    <label for="inputConsultantArea" class="admin-label">Konsulent Område :</label>
                    <select class="form-control form-control-sm" @bind="regAccModel.ConsultantAreaId">
                        @if (!consultantAreas.Any())
                        {
                            <option value="0" selected>Fandt ikke nogen områder..</option>
                        }
                        else
                        {
                            <option value="0" selected>Vælg et konsulent område</option>

                            @foreach (var c in consultantAreas)
                            {
                                <option value="@c.Identifier">@c.Name</option>
                            }
                        }
                    </select>
                    <ValidationMessage For="@(() => regAccModel.ConsultantAreaId)" />
                </div>

                <div class="col">
                    <label for="inputLocation" class="admin-label">Lokation :</label>
                    <select class="form-control form-control-sm" @bind="regAccModel.LocationId">
                        @if (!locations.Any())
                        {
                            <option value="0" selected>Fandt ikke nogen lokationer..</option>
                        }
                        else
                        {
                            <option value="0" selected>Vælg en lokation</option>

                            @foreach (var l in locations)
                            {
                                <option value="@l.Identifier">@l.Name</option>
                            }
                        }
                    </select>
                    <ValidationMessage For="@(() => regAccModel.LocationId)" />
                </div>
            </div>
            <hr />
            <div class="row">
                <div class="col">
                    <label for="inputPassword" class="admin-label">Adgangskode :</label>
                    <input id="inputPassword" type="password" class="form-control form-control-sm" placeholder="Adgangskode" @bind="regAccModel.Password" />
                    <ValidationMessage For="@(() => regAccModel.Password)" />
                </div>

                <div class="col">
                    <label for="inputConfirmPassword" class="admin-label">Bekræft Adgangskode :</label>
                    <input id="inputConfirmPassword" type="password" class="form-control form-control-sm" placeholder="Bekræft adgangskode" @bind="regAccModel.ConfirmPassword" />
                    <ValidationMessage For="@(() => regAccModel.ConfirmPassword)" />
                    <ValidationSummary Model="regAccModel" />
                </div>
            </div>
            <button type="submit" class="btn btn-info float-right ml-auto mt-5" disabled="@(isProcessingRequest || emailExists)">
                @if (isProcessingRequest)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span>Opretter Praktikkonsulent...</span>
                }
                else
                {
                    <span>Opret Praktikkonsulent</span>
                }
            </button>

        </EditForm>
    }

</div>

@code {
    [Inject] private IUserService UserService { get; set; }
    [Inject] private DataService DataService { get; set; }

    private RegisterAccountModel regAccModel;
    private User User;
    private IEnumerable<ConsultantArea> consultantAreas;
    private IEnumerable<Location> locations;

    private bool isProcessingRequest = false;
    private bool dataIsLoading = false;
    private bool errorOcurred = false;
    private bool emailExists = false;
    private string errorMessage = string.Empty;
    private string infoMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        consultantAreas = new List<ConsultantArea>();
        locations = new List<Location>();
        regAccModel = new();
        User = new User { ConsultantArea = new(), Location = new() };

        await LoadInformation();
    }

    private async Task LoadInformation()
    {
        errorOcurred = false;
        dataIsLoading = true;

        try
        {
            consultantAreas = await DataService.GetAllConsultantAreasAsync();
            locations = await DataService.GetAllLocationsAsync();
        }
        catch (Exception)
        {
            errorOcurred = true;
            errorMessage = "Kunne ikke hente nødvendig information, prøv igen senere.";
        }
        finally
        {
            dataIsLoading = false;
        }
    }

    private async Task OnValidSubmit_RegisterAccountAsync()
    {
        ClearMessages();

        errorOcurred = false;
        isProcessingRequest = true;

        try
        {
            if (emailExists)
            {
                CancelRegistrationRequest();
                return;
            }

            var userService = (UserService)UserService;

            var userResult = await userService.RegisterUserAsync(regAccModel);

            if (string.IsNullOrEmpty(userResult.Email))
            {
                errorMessage = "Ukendt fejl, Praktikkonsulent blev ikke oprettet.";
                return;
            }

            infoMessage = "Praktikkonsulent blev oprettet succesfuldt";
        }
        catch (Exception)
        {
            errorOcurred = true;
            errorMessage = "Ukendt Fejl.";
        }
        finally
        {
            isProcessingRequest = false;
            regAccModel = new();
        }
    }

    private async Task OnEmailFocusOut_CheckForExistence(FocusEventArgs e)
    {
        try
        {
            var userService = (UserService)UserService;

            if (userService != null)
            {
                if (string.IsNullOrEmpty(regAccModel.Email) || string.IsNullOrWhiteSpace(regAccModel.Email))
                {
                    emailExists = false;
                    return;
                }

                emailExists = await userService.CheckUserExistsAsync(regAccModel.Email);
            }
        }
        catch (Exception)
        {
            errorMessage = "Fejl ved tjek om email findes.";
        }
    }

    private void CancelRegistrationRequest()
    {
        errorMessage = "Praktikkonsulent eksitere allerede.";
        regAccModel.Email = string.Empty;
    }

    private void ClearMessages()
    {
        infoMessage = string.Empty;
        errorMessage = string.Empty;
    }
}
