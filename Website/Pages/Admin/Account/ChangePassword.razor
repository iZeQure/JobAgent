@page "/admin/account/changepassword"

@attribute [Authorize]
@* Page Title *@
<PageTitle Title="Skift Adgangskode" />

<PageDisplayName DisplayName="Skift Adgangskode" />

@if (!string.IsNullOrEmpty(infoMessage))
{
    <MessageAlert FullWidth="false" Alert="MessageAlert.AlertType.Success" Message="@infoMessage" />
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <MessageAlert FullWidth="false" Alert="MessageAlert.AlertType.Error" Message="@errorMessage" />
}

<div class="container">

    <div class="form-group">
        <label for="fakeInputEmail" class="admin-label">Email Adresse :</label>
        <span id="fakeInputEmail" type="text" class="form-control form-control-sm" readonly>@(changePasswordModel.Email)</span>
    </div>

    <EditForm Model="@changePasswordModel" OnValidSubmit="OnValidSubmit_ChangeUserPassword" OnInvalidSubmit="OnInvalidSubmit_ChangeUserPassword">

        <DataAnnotationsValidator />

        <hr />
        <div class="form-group">
            <label for="inputPassword" class="admin-label">Ny Adgangskode :</label>
            <input id="inputPassword" type="password" class="form-control form-control-sm" placeholder="Indtast adgangskode.." @bind="changePasswordModel.Password" />
            <ValidationMessage For="@(() => changePasswordModel.Password)" />
        </div>
        <hr />
        <div class="form-group">
            <label for="inputConfirmPassword" class="admin-label">Bekræft Adgangskode :</label>
            <input id="inputConfirmPassword" type="password" class="form-control form-control-sm" placeholder="Bekræft adgangskode.." @bind="changePasswordModel.ConfirmPassword" />
            <ValidationMessage For="@(() => changePasswordModel.ConfirmPassword)" />
            <ValidationSummary Model="@changePasswordModel" />
        </div>
        <hr />
        <button type="submit" class="btn btn-sm btn-info float-right ml-auto mt-5" disabled="@isProcessingPasswordChangeRequest">
            @if (isProcessingPasswordChangeRequest)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <span>Skifter adgangskode...</span>
            }
            else
            {
                <span>Skift adgangskode</span>
            }
        </button>

    </EditForm>
</div>

@code {
    [CascadingParameter] private Task<AuthenticationState> AuthState { get; set; }

    [Inject] public AdminService AdminService { get; set; }

    private string infoMessage = string.Empty;
    private string errorMessage = string.Empty;
    private bool isProcessingPasswordChangeRequest = false;

    private ChangePasswordModel changePasswordModel;
    private ClaimsPrincipal claim;

    protected async override Task OnInitializedAsync()
    {
        changePasswordModel = new();

        var authState = await AuthState;

        if (authState == null)
        {
            errorMessage = "Noget gik galt da siden blev indlæst.";
            return;
        }

        claim = authState.User;

        if (claim == null)
        {
            errorMessage = "Noget gik galt, prøv at genindlæs siden.";
            return;
        }

        changePasswordModel.Email = claim.FindFirstValue(ClaimTypes.Email);
    }

    private async Task OnValidSubmit_ChangeUserPassword()
    {
        ClearMessages();

        try
        {
            isProcessingPasswordChangeRequest = true;

            infoMessage = "Arbejder på det, vent venligst..";

            await AdminService.UpdateUserPasswordAsync(changePasswordModel);

            infoMessage = "Adgangskode blev ændret.";
        }
        catch (Exception)
        {
            errorMessage = "Kunne ikke ændre adgangskode, prøv igen senere.";
        }
        finally
        {
            ResetModelInformation();

            isProcessingPasswordChangeRequest = false;
        }
    }

    private void OnInvalidSubmit_ChangeUserPassword()
    {
        errorMessage = "Venligst udfyld de manglende felter, markeret med rød.";
    }

    private void ResetModelInformation()
    {
        changePasswordModel = new();

        changePasswordModel.Email = claim.FindFirstValue(ClaimTypes.Email);
    }

    private void ClearMessages()
    {
        infoMessage = string.Empty;
        errorMessage = string.Empty;
    }
}
