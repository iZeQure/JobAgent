@if (dataIsLoading)
{
    <MessageAlert Alert="@MessageAlert.AlertType.Info" Message="Indlæser oplysninger.." IsLoading="@dataIsLoading" />
}

@if (menu != null && menu.Count() > 0)
{
    <div class="py-1 px-2">
        <a class="btn btn-link btn-sm text-wrap text-left @menuCssColor" href="/job/uncategorized">
            <span class="mr-2">Ikke kategoriserert</span> <span class="badge badge-info">@(uncategorizedCount)</span>
        </a>
    </div>

    @for (int i = 0; i < menu.Count(); i++)
    {
        @if (menu.ElementAtOrDefault(i).Specializations != null)
        {
            <div class="dropright py-1 px-2">
                @{
                    Category menuItem = menu.ElementAtOrDefault(i);
                    string nameWithoutWhitespaces = RemoveWhitespace(menuItem.Name);
                }

                <a id="@(nameWithoutWhitespaces)DropdownMenu" role="button" class="@menuCssColor dropdown-toggle btn btn-link btn-sm text-left cursor-pointer" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    <span class="mr-2">@(menuItem.Name)</span>
                    @if (GetCategoryCount(menuItem.Identifier).IsCompleted)
                    {
                        <span class="badge badge-info">@(categoryCount)</span>
                    }
                </a>

                <div class="dropdown-menu dropdown-menu-right" style="width:250px;">
                    @if (menuItem.Specializations.Count > 1)
                    {
                        <h6 class="dropdown-header">Uddannelses Specialer</h6>
                    }
                    else
                    {
                        <h6 class="dropdown-header">Uddannelses Speciale</h6>
                    }

                    <div class="dropdown-divider"></div>

                    @for (int j = 0; j < menuItem.Specializations.Count; j++)
                    {
                        <a class="dropdown-item text-left text-truncate w-auto" href="/job/@(menuItem.Identifier)/@(menuItem.Specializations[j].Identifier)">
                            @{
                                int selectedSpecializationId = menuItem.Specializations[j].Identifier;
                            }
                            @if (GetSpecializationCount(selectedSpecializationId).IsCompleted)
                            {
                                <span class="badge badge-info">@(specializationCount)</span>
                            }
                            <span class="ml-2">@(menuItem.Specializations[j].Name)</span>
                        </a>
                    }
                </div>
            </div>
        }
        else
        {
            <div class="py-1 px-2">
                @{ var menuItem = menu.ElementAtOrDefault(i); }
                <a class="@linkCssColor btn btn-link btn-sm text-wrap text-left" href="/job/@menuItem.Identifier">
                    <span class="mr-2">@(menuItem.Name)</span>
                    @if (GetCategoryCount(menuItem.Identifier).IsCompleted)
                    {
                        <span class="badge badge-info">@(categoryCount)</span>
                    }
                </a>
            </div>
        }
    }
}
else
{
    <MessageAlert Alert="@MessageAlert.AlertType.Warning" Message="Menuen blev ikke opdateret korrekt." MessageOptional="Vent lidt endnu, eller opdater siden igen." />
}

@code {
    [Inject] JobService JobService { get; set; }
    [Inject] DataService DataService { get; set; }

    private IEnumerable<Category> menu;

    private string menuCssColor = "text-light";
    private string linkCssColor = "text-light";

    private int uncategorizedCount = 0;
    private int categoryCount = 0;
    private int specializationCount = 0;

    private bool dataIsLoading = false;

    protected override async Task OnInitializedAsync()
    {
        ShouldRender();
        dataIsLoading = true;

        await LoadMenu();

    }

    protected override bool ShouldRender()
    {
        return base.ShouldRender();
    }

    protected async Task LoadMenu()
    {
        try
        {
            uncategorizedCount = await DataService.GetCountOfJobAdvertsUncategorizedAsync();

            menu = await JobService.GetJobMenuAsync();
        }
        catch (Exception)
        {
            menu = null;
        }
        finally
        {
            dataIsLoading = false;
        }
    }

    protected async Task GetCategoryCount(int id)
    {
        try
        {
            categoryCount = await DataService.GetCountOfJobAdvertsByCategoryAsync(id);
        }
        finally
        {
            await Task.CompletedTask;
        }
    }

    protected async Task GetSpecializationCount(int id)
    {
        try
        {
            specializationCount = await DataService.GetCountOfJobAdvertsBySpecializationIdAsync(id);
        }
        finally
        {
            await Task.CompletedTask;
        }
    }

    protected async Task<int> GetUncategorizedCount()
    {
        return await DataService.GetCountOfJobAdvertsUncategorizedAsync();
    }

    protected string RemoveWhitespace(string input)
    {
        return new string(input.ToCharArray()
        .Where(c => !Char.IsWhiteSpace(c))
        .ToArray());
    }
}
