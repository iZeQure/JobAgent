@if (menu.Equals(null) || !menu.Any())
{
    <MessageAlert Alert="@alert" Message="@systemMessage" IsLoading="@dataIsLoading" />
}
else
{
    <div class="py-1 px-2">
        <a class="btn btn-link btn-sm text-wrap text-left @menuCssColor" href="/job/uncategorized">
            Ikke kategoriserert <span class="badge badge-info">@(GetUncategorizedCount().Result)</span>
        </a>
    </div>

    @for (int i = 0; i < menu.Count(); i++)
    {
        @if (menu.ElementAtOrDefault(i).Specializations != null)
        {
            <div class="dropdown py-1 px-2">
                <a id="@RemoveWhitespace(menu.ElementAtOrDefault(i).Name)DropdownMenu" class="@menuCssColor dropdown-toggle btn btn-link btn-sm text-wrap text-left cursor-pointer" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    @menu.ElementAtOrDefault(i).Name <span class="badge badge-info">@(GetCategoryCount(menu.ElementAtOrDefault(i).Specializations.Select(x => x.CategoryId).First()).Result)</span>
                </a>

                <div class="dropdown-menu" aria-labelledby="@RemoveWhitespace(menu.ElementAtOrDefault(i).Name)DropdownMenu">
                    @if (menu.ElementAtOrDefault(i).Specializations.Count > 1)
                    {
                        <h6 class="dropdown-header">Uddannelses Specialer</h6>
                    }
                    else
                    {
                        <h6 class="dropdown-header">Uddannelses Speciale</h6>
                    }

                    <div class="dropdown-divider"></div>

                    @for (int j = 0; j < menu.ElementAtOrDefault(i).Specializations.Count; j++)
                    {
                        <a class="dropdown-item text-wrap text-left" href="/job/@menu.ElementAtOrDefault(i).Identifier/@menu.ElementAtOrDefault(i).Specializations[j].Identifier">
                            @menu.ElementAtOrDefault(i).Specializations[j].Name <span class="badge badge-info">@(GetSpecializationCount(menu.ElementAtOrDefault(i).Specializations[j].Identifier).Result)</span>
                        </a>
                    }
                </div>
            </div>
        }
        else
        {
            <div class="py-1 px-2">
                <a class="@linkCssColor btn btn-link btn-sm text-wrap text-left" href="/job/@menu.ElementAtOrDefault(i).Identifier">
                    @menu.ElementAtOrDefault(i).Name <span class="badge badge-info">@GetCategoryCount(menu.ElementAtOrDefault(i).Identifier).Result</span>
                </a>
            </div>
        }
    }
}

@code {
    [Inject] JobService JobService { get; set; }
    [Inject] DataService DataService { get; set; }

    private IEnumerable<Category> menu;
    private MessageAlert.AlertType alert;

    private string menuCssColor = "text-light";
    private string linkCssColor = "text-light";
    private string systemMessage = string.Empty;

    private bool dataIsLoading = false;

    protected override async Task OnInitializedAsync()
    {
        menu = new List<Category>();

        await LoadMenu();
    }

    protected async Task LoadMenu()
    {
        if (menu == null)
        {
            alert = MessageAlert.AlertType.Error;
            systemMessage = $"Menu kunne ikke findes.";

            return;
        }

        try
        {
            dataIsLoading = true;

            alert = MessageAlert.AlertType.Info;
            systemMessage = "Henter menu oplysninger..";

            menu = await JobService.GetJobMenuAsync();

            dataIsLoading = false;
        }
        catch (Exception)
        {
            dataIsLoading = false;
            systemMessage = "Ukendt fejl ved indlæsning af menu.";
        }
        finally
        {
            dataIsLoading = false;
            systemMessage = string.Empty;
        }
    }

    protected async Task<int> GetCategoryCount(int id)
    {
        int output = await DataService.GetCountOfJobAdvertsByCategoryAsync(id);

        return output;
    }

    protected async Task<int> GetSpecializationCount(int id)
    {
        int output = await DataService.GetCountOfJobAdvertsBySpecializationIdAsync(id);

        return output;
    }

    protected async Task<int> GetUncategorizedCount()
    {
        int output = await DataService.GetCountOfJobAdvertsUncategorizedAsync();

        return output;
    }

    protected string RemoveWhitespace(string input)
    {
        return new string(input.ToCharArray()
        .Where(c => !Char.IsWhiteSpace(c))
        .ToArray());
    }
}
