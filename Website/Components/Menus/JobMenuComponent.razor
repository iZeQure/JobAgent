@inject JobService JobService
@inject DataService DataService

@if (JobCategories.Equals(null) || !JobCategories.Any() || JobCategories.Count().Equals(0))
{
    <MessageAlert Alert="@AlertType" Message="@SystemMessage" IsLoading="@IsLoading" />
}
else
{
    <div class="py-1 px-2">
        <a class="btn btn-link btn-sm text-wrap text-left @MenuColor" href="/job/uncategorized">
            Ikke kategoriserert <span class="badge badge-info">@(GetUncategorizedCount().Result)</span>
        </a>
    </div>

    @for (int i = 0; i < JobCategories.Count(); i++)
    {
        @if (JobCategories.ElementAtOrDefault(i).Specializations != null)
        {
            <div class="dropdown py-1 px-2">
                <a id="@RemoveWhitespace(JobCategories.ElementAtOrDefault(i).Name)DropdownMenu" class="@MenuColor dropdown-toggle btn btn-link btn-sm text-wrap text-left cursor-pointer" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    @JobCategories.ElementAtOrDefault(i).Name <span class="badge badge-info">@(GetCategoryCount(JobCategories.ElementAtOrDefault(i).Specializations.Select(x => x.CategoryId).First()).Result)</span>
                </a>

                <div class="dropdown-menu" aria-labelledby="@RemoveWhitespace(JobCategories.ElementAtOrDefault(i).Name)DropdownMenu">
                    @if (JobCategories.ElementAtOrDefault(i).Specializations.Count > 1)
                    {
                        <h6 class="dropdown-header">Uddannelses Specialer</h6>
                    }
                    else
                    {
                        <h6 class="dropdown-header">Uddannelses Speciale</h6>
                    }

                    <div class="dropdown-divider"></div>

                    @for (int j = 0; j < JobCategories.ElementAtOrDefault(i).Specializations.Count; j++)
                    {
                        // Link : {domain}/job/CategoryId/CategoryName/SpecializationId/SpecializationName
                        <a class="dropdown-item text-wrap text-left" href="/job/@JobCategories.ElementAtOrDefault(i).Identifier/@JobCategories.ElementAtOrDefault(i).Specializations[j].Identifier">
                            @JobCategories.ElementAtOrDefault(i).Specializations[j].Name <span class="badge badge-info">@(GetSpecializationCount(JobCategories.ElementAtOrDefault(i).Specializations[j].Identifier).Result)</span>
                        </a>
                    }
                </div>
            </div>
        }
        else
        {
            <div class="py-1 px-2">
                @* Link : {domain}/job/CategoryId/CategoryName *@
                <a class="@MenuColor btn btn-link btn-sm text-wrap text-left" href="/job/@JobCategories.ElementAtOrDefault(i).Identifier">
                    @JobCategories.ElementAtOrDefault(i).Name <span class="badge badge-info">@GetCategoryCount(JobCategories.ElementAtOrDefault(i).Identifier).Result</span>
                </a>
            </div>
        }
    }
}

@code {
    IEnumerable<Category> JobCategories = new List<Category>();

    public string MenuColor { get; set; } = "text-light";

    public string SystemMessage { get; set; } = string.Empty;

    private MessageAlert.AlertType AlertType { get; set; }
    private bool IsLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadMenu();

        if (JobCategories.Equals(null))
        {
            AlertType = MessageAlert.AlertType.Warning;
            SystemMessage = $"Kunne ikke indlæse menu!";
        }
    }

    protected async Task LoadMenu()
    {
        try
        {
            AlertType = MessageAlert.AlertType.Info;
            SystemMessage = "Indlæser menu..";
            IsLoading = true;

            JobCategories = await JobService.GetJobMenuAsync();
        }
        finally
        {
            IsLoading = false;
            SystemMessage = string.Empty;
        }
    }

    protected async Task<int> GetCategoryCount(int id)
    {
        int output = await DataService.GetCountOfJobAdvertsByCategory(id);

        return output;
    }

    protected async Task<int> GetSpecializationCount(int id)
    {
        int output = await DataService.GetCountOfJobAdvertsBySpecializationId(id);

        return output;
    }

    protected async Task<int> GetUncategorizedCount()
    {
        int output = await DataService.GetCountOfJobAdvertsUncategorized();

        return output;
    }

    protected string RemoveWhitespace(string input)
    {
        return new string(input.ToCharArray()
        .Where(c => !Char.IsWhiteSpace(c))
        .ToArray());
    }
}
