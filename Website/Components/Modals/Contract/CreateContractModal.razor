@attribute [Authorize]

<div id="CreateContractModal" class="modal fade" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">

            @if (!isLoadingData)
            {
                <EditForm Model="contractModel" OnValidSubmit="OnValidSubmit_CreateContract">

                    <div class="modal-header">
                        <h5 class="modal-title">Ny Kontrakt Information :</h5>
                    </div>

                    <div class="modal-body">

                        <ValidationSummary />
                        <DataAnnotationsValidator />

                        <div class="row">
                            <div class="col">
                                <label for="inputCompany" class="admin-label col-form-label col-form-label-sm">Kontrakt for :</label>
                                <select id="inputCompany" class="form-control form-control-sm" @bind="contractModel.SignedWithCompany">
                                    <option value="0" selected>---Vælg en virksomhed fra listen---</option>
                                    @foreach (var company in companies)
                                    {
                                        <option value="@company.Identifier">@company.Name</option>
                                    }
                                </select>
                            </div>
                            <div class="col">
                                <label for="inputSignedByUser" class="admin-label col-form-label col-form-label-sm">Underskrevet af :</label>
                                <select id="inputSignedByUser" class="form-control form-control-sm" @bind="contractModel.SignedByUser">
                                    <option value="0" selected>---Vælg en konsulent fra listen---</option>
                                    @foreach (var user in users)
                                    {
                                        <option value="@user.Identifier">@user.FullName</option>
                                    }
                                </select>
                            </div>
                        </div>

                        <hr />

                        <div class="row">
                            <div class="col">
                                <label for="inputContactPerson" class="admin-label col-form-label col-form-label-sm">Virksomheds Kontakt Person :</label>
                                <input id="inputContactPerson" class="form-control form-control-sm" type="text" placeholder="Indtast navnet på kontakt personen.." @bind="contractModel.ContactPerson" />
                            </div>
                            <div class="col">
                                <label for="inputContractFile" class="admin-label col-form-label col-form-label-sm">Vælg Kontrakt : </label>
                                <div id="contractFileInput">
                                    <Microsoft.AspNetCore.Components.Forms.InputFile OnChange="@OnInputFileChange" single />

                                    @if (!string.IsNullOrEmpty(contractModel.ContractFileName))
                                    {
                                        <div class="alert alert-light alert-dismissible fade show" role="alert">
                                            <p class="d-inline">@contractModel.ContractFileName</p>

                                            <button type="button" class="close" data-dismiss="alert" @onclick="RemoveUploadedFile" aria-label="Close">
                                                <span aria-hidden="true">&times;</span>
                                            </button>
                                        </div>
                                    }

                                    @if (!string.IsNullOrEmpty(contractDataUrl))
                                    {
                                        <h4 class="small text-muted">Kontrakt Preview</h4>
                                        <div class="container justify-content-center">
                                            <iframe src="@contractDataUrl"
                                                    class="embed-responsive-item"
                                                    lang="da"
                                                    title="Kontrakt Preview"
                                                    frameborder="1"
                                                    allowtransparency="true">
                                            </iframe>
                                        </div>
                                    }

                                </div>
                            </div>
                        </div>

                        <hr />

                        <div class="row">
                            <div class="col">
                                <label for="inputRegisteredDate" class="admin-label col-form-label col-form-label-sm">Kontrakt Registreret Dato :</label>
                                <InputDate TValue="DateTime" @bind-Value="@(contractModel.RegistrationDate)" class="form-control form-control-sm" />
                            </div>
                            <div class="col">
                                <label for="inputExpiryDate" class="admin-label col-form-label col-form-label-sm">Udløbsdato :</label>
                                <InputDate TValue="DateTime" @bind-Value=@(contractModel.ExpiryDate) class="form-control form-control-sm" disabled />
                            </div>
                        </div>

                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="CancelRequest" @onclick:preventDefault>Annuller</button>
                        <button class="btn btn-info text-light cursor-pointer" type="submit" disabled="@isProcessing">Gem Ændringer</button>
                    </div>

                </EditForm>
            }

        </div>
    </div>
</div>

@code {
    [Inject] protected IJSRuntime JSRuntime { get; set; }
    [Inject] protected IRefresh RefreshService { get; set; }
    [Inject] protected IFileService FileService { get; set; }
    [Inject] protected AdminService AdminService { get; set; }
    [Inject] protected DataService DataService { get; set; }

    private ContractModel contractModel = new ContractModel();
    private IEnumerable<User> users = new List<User>();
    private IEnumerable<Company> companies = new List<Company>();

    private bool isProcessing = false;
    private bool isLoadingData = false;

    private string contractDataUrl = string.Empty;

    private byte[] fileData = null;

    protected override async Task OnInitializedAsync()
    {
        isLoadingData = true;

        await Task.Delay(500);

        companies = await DataService.GetCompaniesWithOutContract();
        users = await DataService.GetUsers();

        await Task.Delay(500);

        isLoadingData = false;
        StateHasChanged();
    }

    private async Task OnValidSubmit_CreateContract()
    {
        isProcessing = true;

        if (fileData == null)
        {
            isProcessing = false;
            return;
        }

        string uploadedFileName = await FileService.UploadFileAsync(fileData);

        if (string.IsNullOrEmpty(uploadedFileName))
        {
            isProcessing = false;
            return;
        }

        // Process Contract Request.
        contractModel.ContractFileName = uploadedFileName;
        await AdminService.CreateContract(contractModel);

        contractModel = new ContractModel();

        isProcessing = false;

        RefreshService.CallRefreshRequest();
        await JSRuntime.InvokeVoidAsync("modalToggle", "CreateContractModal");
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        contractDataUrl = string.Empty;

        //var maxAllowedFiles = 1;
        //var format = "image/png";
        var cFormat = "application/pdf";

        var contract = e.File;

        if (contract != null)
        {
            contractModel.ContractFileName = contract.Name;

            fileData = new byte[contract.Size];

            try
            {
                await contract.OpenReadStream().ReadAsync(fileData);
                var cUrl = $"data:{cFormat};base64,{FileService.EncodeFileToBase64(fileData)}";

                contractDataUrl = cUrl;
            }
            catch (Exception)
            {
                throw;
            }
        }
    }

    private void RemoveUploadedFile(MouseEventArgs e)
    {
        contractModel.ContractFileName = string.Empty;
        contractDataUrl = string.Empty;
    }

    private void CancelRequest(MouseEventArgs e)
    {
        contractModel = new ContractModel();
    }
}
