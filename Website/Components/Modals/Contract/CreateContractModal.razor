@attribute [Authorize]

<div id="CreateContractModal" class="modal fade" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">

            @if (!isLoadingData)
            {
                <EditForm Model="contractModel" OnValidSubmit="OnValidSubmit_CreateContract">

                    <div class="modal-header">
                        <h5 class="modal-title">Ny Kontrakt Information :</h5>
                    </div>

                    <div class="modal-body">
                        <DataAnnotationsValidator />

                        <div class="row">
                            <div class="col">
                                <label for="inputCompany" class="admin-label col-form-label col-form-label-sm">Kontrakt for :</label>
                                <ValidationMessage For="() => contractModel.SignedWithCompany" />
                                <select id="inputCompany" class="form-control form-control-sm" @bind="contractModel.SignedWithCompany">
                                    <option value="0" selected>---Vælg en virksomhed fra listen---</option>
                                    @foreach (var company in companies)
                                    {
                                        <option value="@company.Identifier">@company.Name</option>
                                    }
                                </select>
                            </div>
                            <div class="col">
                                <label for="inputSignedByUser" class="admin-label col-form-label col-form-label-sm">Underskrevet af :</label>
                                <ValidationMessage For="() => contractModel.SignedByUser" />
                                <select id="inputSignedByUser" class="form-control form-control-sm" @bind="contractModel.SignedByUser">
                                    <option value="0" selected>---Vælg en konsulent fra listen---</option>
                                    @foreach (var user in users)
                                    {
                                        <option value="@user.Identifier">@user.FullName</option>
                                    }
                                </select>
                            </div>
                        </div>

                        <hr />

                        <div class="row">
                            <div class="col">
                                <label for="inputContactPerson" class="admin-label col-form-label col-form-label-sm">Virksomheds Kontakt Person :</label>
                                <ValidationMessage For="() => contractModel.ContactPerson" />
                                <input id="inputContactPerson" class="form-control form-control-sm" type="text" placeholder="Indtast navnet på kontakt personen.." @bind="contractModel.ContactPerson" />
                            </div>
                            <div class="col">
                                <label for="inputContractFile" class="admin-label col-form-label col-form-label-sm">Vælg Kontrakt : </label>
                                <div id="contractFileInput">
                                    <InputFile OnChange="@OnInputFileChange" single />
                                    <ValidationMessage For="() => contractModel.Contract"/>

                                    @if (!string.IsNullOrEmpty(contractModel.ContractFileName))
                                    {
                                        <div class="alert alert-light alert-dismissible fade show" role="alert">
                                            <p class="d-inline">@contractModel.ContractFileName</p>

                                            <button type="button" class="close" data-dismiss="alert" @onclick="RemoveUploadedFile" aria-label="Close">
                                                <span aria-hidden="true">&times;</span>
                                            </button>
                                        </div>
                                    }

                                    @if (!string.IsNullOrEmpty(contractDataUrlForPreview))
                                    {
                                        <h4 class="small text-muted">Kontrakt Preview</h4>
                                        <div class="container justify-content-center">
                                            <iframe src="@contractDataUrlForPreview"
                                                    class="embed-responsive-item"
                                                    lang="da"
                                                    title="Kontrakt Preview"
                                                    frameborder="1"
                                                    allowtransparency="true">
                                            </iframe>
                                        </div>
                                    }

                                </div>
                            </div>
                        </div>

                        <hr />

                        <div class="row">
                            <div class="col">
                                <label for="inputRegisteredDate" class="admin-label col-form-label col-form-label-sm">Kontrakt Registreret Dato :</label>
                                <ValidationMessage For="() => contractModel.RegistrationDate" />
                                <InputDate TValue="DateTime" @bind-Value="@(contractModel.RegistrationDate)" class="form-control form-control-sm" />
                            </div>
                            <div class="col">
                                <label for="inputExpiryDate" class="admin-label col-form-label col-form-label-sm">Udløbsdato :</label>
                                <ValidationMessage For="() => contractModel.ExpiryDate" />
                                <InputDate TValue="DateTime" @bind-Value=@(contractModel.ExpiryDate) class="form-control form-control-sm" disabled />
                            </div>
                        </div>

                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="CancelRequest" @onclick:preventDefault>Annuller</button>
                        <button class="btn btn-info text-light cursor-pointer" type="submit" disabled="@isProcessing">Gem Ændringer</button>
                    </div>

                </EditForm>
            }

        </div>
    </div>
</div>

@code {
    [Inject] protected IJSRuntime JSRuntime { get; set; }
    [Inject] protected IRefresh RefreshService { get; set; }
    [Inject] protected IFileService FileService { get; set; }
    [Inject] protected AdminService AdminService { get; set; }
    [Inject] protected DataService DataService { get; set; }

    private CancellationTokenSource cancelation;
    private ContractModel contractModel;
    private IEnumerable<User> users;
    private IEnumerable<Company> companies;

    long maxFileSize = 1024 * 1024 * 15;

    private bool isProcessing = false;
    private bool isLoadingData = false;

    private string contractDataUrlForPreview = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        cancelation = new();
        contractModel = new();

        users = new List<User>();
        companies = new List<Company>();

        isLoadingData = true;

        companies = await DataService.GetCompaniesWithOutContractAsync();
        users = await DataService.GetUsersAsync();

        isLoadingData = false;
    }

    private async Task OnValidSubmit_CreateContract()
    {
        isProcessing = true;

        var buffer = new byte[contractModel.Contract.Size];

        await contractModel.Contract.OpenReadStream(maxFileSize).ReadAsync(buffer, cancelation.Token);

        string uploadedFileName = await FileService.UploadFileAsync(buffer);

        if (string.IsNullOrEmpty(uploadedFileName))
        {
            isProcessing = false;
            return;
        }

        // Process Contract Request.
        contractModel.ContractFileName = uploadedFileName;
        await AdminService.CreateContractAsync(contractModel);

        isProcessing = false;

        RefreshService.CallRefreshRequest();
        await JSRuntime.InvokeVoidAsync("modalToggle", "CreateContractModal");

        contractModel = new();
        contractDataUrlForPreview = string.Empty;
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        contractModel.Contract = e.File;
        contractModel.ContractFileName = contractModel.Contract.Name;

        var buffer = new byte[contractModel.Contract.Size];

        await contractModel.Contract.OpenReadStream().ReadAsync(buffer, cancelation.Token);
        contractDataUrlForPreview = $"data:{contractModel.Contract.ContentType};base64,{FileService.EncodeFileToBase64(buffer)}";
    }

    private void RemoveUploadedFile(MouseEventArgs e)
    {
        contractModel.ContractFileName = string.Empty;
        contractDataUrlForPreview = string.Empty;
    }

    private void CancelRequest(MouseEventArgs e)
    {
        contractModel = new ContractModel();
        contractDataUrlForPreview = string.Empty;
    }
}
