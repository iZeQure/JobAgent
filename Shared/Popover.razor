@inject IJSRuntime JSRunTime

@switch (Color)
{
    case PopoverType.Danger:
        <a class="popover-danger btn btn-outline-danger" role="button" tabindex="0" data-toggle="popover">
            <i class="fas fa-trash-alt"></i>
        </a>
        break;
    case PopoverType.Info:
        <a class="popover-info btn btn-outline-info" role="button" tabindex="0" data-toggle="popover">
            <i class="far fa-edit"></i>
        </a>
        break;
    default:
        break;
}

@code {
    public enum PopoverType { Danger = 0, Info = 1 }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string Body { get; set; }

    [Parameter]
    public PopoverType Color { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await SetPopover();
    }

    protected async override Task OnParametersSetAsync()
    {
        await SetPopover();
    }

    private async Task SetPopover()
    {
        await JSRunTime.InvokeVoidAsync("HTMLBodyElement", $"{Title}", $"{Body}", $"{Color}");
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
}
